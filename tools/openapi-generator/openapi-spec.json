{
  "openapi": "3.1.1",
  "info": {
    "title": "UMA REST API",
    "description": "Unraid Management Agent API providing 100% functionality coverage for comprehensive server management.\n\n## Features\n\n### System Monitoring\n- **Hardware Monitoring**: CPU usage, RAM utilization, temperatures, fan speeds\n- **Real-time Metrics**: Live system statistics with WebSocket updates\n- **GPU Monitoring**: Graphics card status and utilization\n- **Network Monitoring**: Interface statistics and connectivity status\n\n### Storage Management\n- **Array Management**: Unraid array start/stop with proper orchestration\n- **Disk Monitoring**: Individual disk health, SMART data, temperatures\n- **Cache Management**: Cache disk status and performance metrics\n- **ZFS Support**: ZFS pool monitoring and management\n- **Parity Operations**: Parity check status and scheduling\n\n### Container \u0026 VM Control\n- **Docker Management**: Individual and bulk container operations (start/stop/restart/pause)\n- **VM Lifecycle**: Virtual machine control and monitoring\n- **Resource Monitoring**: Container and VM resource usage\n\n### UPS \u0026 Power Management\n- **UPS Integration**: Real hardware integration with apcupsd daemon\n- **Power Control**: System shutdown and reboot capabilities\n- **Battery Monitoring**: UPS battery status, runtime, and load information\n\n### System Control\n- **User Scripts**: Execute custom Unraid user scripts\n- **Log Management**: System log access and monitoring\n- **Command Execution**: Secure command execution with proper validation\n\n### Real-time Updates\n- **WebSocket Support**: Live updates for system stats, Docker events, and storage status\n- **Event Streaming**: Real-time notifications for system changes\n\n## Architecture\n\nBuilt with optimized HTTP mux architecture for production deployment on Unraid servers. Designed for reliability, performance, and comprehensive monitoring capabilities.\n\n## Authentication\n\nSupports JWT-based authentication and API key authentication for secure access control.",
    "version": "2025.06.16",
    "contact": {
      "name": "UMA Development Team",
      "url": "https://github.com/domalab/uma",
      "email": "ruaan.deysel@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:34600",
      "description": "Local UMA API server"
    },
    {
      "url": "http://your-unraid-server:34600",
      "description": "Remote UMA API server (replace with your server IP)"
    }
  ],
  "paths": {
    "/api/v1/docker/containers": {
      "get": {
        "description": "Retrieve a list of Docker containers with optional filtering and pagination",
        "operationId": "listContainers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/AllContainersParameter"
          },
          {
            "$ref": "#/components/parameters/StatusFilterParameter"
          },
          {
            "$ref": "#/components/parameters/VerboseParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ContainerInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "List of containers retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List Docker containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/bulk/pause": {
      "post": {
        "description": "Pause multiple Docker containers in a single operation",
        "operationId": "bulkPauseContainers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            },
            "description": "Bulk pause operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Pause multiple containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/bulk/restart": {
      "post": {
        "description": "Restart multiple Docker containers in a single operation",
        "operationId": "bulkRestartContainers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            },
            "description": "Bulk restart operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Restart multiple containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/bulk/resume": {
      "post": {
        "description": "Resume multiple paused Docker containers in a single operation",
        "operationId": "bulkResumeContainers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            },
            "description": "Bulk resume operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Resume multiple containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/bulk/start": {
      "post": {
        "description": "Start multiple Docker containers in a single operation",
        "operationId": "bulkStartContainers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            },
            "description": "Bulk start operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Start multiple containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/bulk/stop": {
      "post": {
        "description": "Stop multiple Docker containers in a single operation",
        "operationId": "bulkStopContainers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponse"
                }
              }
            },
            "description": "Bulk stop operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Stop multiple containers",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific Docker container",
        "operationId": "getContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          },
          {
            "$ref": "#/components/parameters/VerboseParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ContainerInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Container information retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get container information",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}/pause": {
      "post": {
        "description": "Pause a running Docker container",
        "operationId": "pauseContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerOperationResponse"
                }
              }
            },
            "description": "Container paused successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Pause container",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}/restart": {
      "post": {
        "description": "Restart a Docker container",
        "operationId": "restartContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerOperationResponse"
                }
              }
            },
            "description": "Container restarted successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Restart container",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}/resume": {
      "post": {
        "description": "Resume a paused Docker container",
        "operationId": "resumeContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerOperationResponse"
                }
              }
            },
            "description": "Container resumed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Resume container",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}/start": {
      "post": {
        "description": "Start a Docker container",
        "operationId": "startContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerOperationResponse"
                }
              }
            },
            "description": "Container started successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Start container",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/containers/{id}/stop": {
      "post": {
        "description": "Stop a Docker container gracefully or forcefully",
        "operationId": "stopContainer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContainerIDParameter"
          },
          {
            "$ref": "#/components/parameters/ForceParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerOperationResponse"
                }
              }
            },
            "description": "Container stopped successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Stop container",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/images": {
      "get": {
        "description": "Retrieve a list of Docker images",
        "operationId": "listImages",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/DockerImage"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "List of images retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List Docker images",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/info": {
      "get": {
        "description": "Retrieve Docker daemon information and statistics",
        "operationId": "getDockerInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DockerInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Docker information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Docker information",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docker/networks": {
      "get": {
        "description": "Retrieve a list of Docker networks",
        "operationId": "listNetworks",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/DockerNetwork"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "List of networks retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List Docker networks",
        "tags": [
          "Docker"
        ]
      }
    },
    "/api/v1/docs": {
      "get": {
        "description": "Interactive Swagger UI documentation for the UMA REST API",
        "operationId": "getDocumentation",
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Swagger UI HTML page"
          }
        },
        "summary": "API Documentation",
        "tags": [
          "Documentation"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "description": "Check the health status of the UMA API service and its dependencies",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            },
            "description": "Service is healthy"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            },
            "description": "Service is unhealthy"
          }
        },
        "summary": "Health check",
        "tags": [
          "Monitoring"
        ]
      }
    },
    "/api/v1/openapi.json": {
      "get": {
        "description": "Get the complete OpenAPI 3.1.1 specification for the UMA REST API",
        "operationId": "getOpenAPISpec",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OpenAPI specification in JSON format"
          }
        },
        "summary": "OpenAPI Specification",
        "tags": [
          "Documentation"
        ]
      }
    },
    "/api/v1/operations": {
      "get": {
        "description": "Retrieve a list of asynchronous operations with optional filtering",
        "operationId": "listAsyncOperations",
        "parameters": [
          {
            "description": "Filter operations by status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "running",
                "completed",
                "failed",
                "cancelled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter operations by operation type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "parity_check",
                "parity_correct",
                "array_start",
                "array_stop",
                "disk_scan",
                "smart_scan",
                "system_reboot",
                "system_shutdown",
                "bulk_container",
                "bulk_vm"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "meta": {
                          "properties": {
                            "api_version": {
                              "description": "API version",
                              "example": "v1",
                              "type": "string"
                            },
                            "request_id": {
                              "description": "Unique request identifier for tracing",
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "Unix timestamp of the response",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "timestamp",
                            "api_version"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "active": {
                              "description": "Number of active operations",
                              "type": "integer"
                            },
                            "completed": {
                              "description": "Number of completed operations",
                              "type": "integer"
                            },
                            "failed": {
                              "description": "Number of failed operations",
                              "type": "integer"
                            },
                            "operations": {
                              "items": {
                                "properties": {
                                  "cancellable": {
                                    "type": "boolean"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "progress": {
                                    "maximum": 100,
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "started": {
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "status": {
                                    "enum": [
                                      "pending",
                                      "running",
                                      "completed",
                                      "failed",
                                      "cancelled"
                                    ],
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "parity_check",
                                      "parity_correct",
                                      "array_start",
                                      "array_stop",
                                      "disk_scan",
                                      "smart_scan",
                                      "system_reboot",
                                      "system_shutdown",
                                      "bulk_container",
                                      "bulk_vm"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "total": {
                              "description": "Total number of operations",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "List of operations retrieved successfully"
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "rate_limited": {
                    "summary": "Rate Limit Exceeded",
                    "value": {
                      "code": "RATE_LIMITED",
                      "details": {
                        "limit": 100,
                        "reset_at": "2025-06-16T15:30:00Z",
                        "retry_after": 3600,
                        "window": "1 hour"
                      },
                      "error": "Rate limit exceeded",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "Request limit per time window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "Remaining requests in current window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "Time when rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "service_unavailable": {
                    "summary": "Service Unavailable",
                    "value": {
                      "code": "SERVICE_UNAVAILABLE",
                      "details": {
                        "service": "docker",
                        "status": "unreachable"
                      },
                      "error": "Docker daemon is not available",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "unexpected_error": {
                    "summary": "Unexpected Error",
                    "value": {
                      "code": "INTERNAL_ERROR",
                      "details": {
                        "error_id": "err_1234567890"
                      },
                      "error": "An unexpected error occurred",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error - An unexpected error occurred"
          }
        },
        "summary": "List async operations",
        "tags": [
          "Async Operations"
        ]
      },
      "post": {
        "description": "Start a new asynchronous operation",
        "operationId": "startAsyncOperation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "bulk_container": {
                  "summary": "Bulk container operation",
                  "value": {
                    "cancellable": false,
                    "description": "Start multiple Docker containers",
                    "parameters": {
                      "container_ids": [
                        "container1",
                        "container2"
                      ],
                      "operation": "start"
                    },
                    "type": "bulk_container"
                  }
                },
                "parity_check": {
                  "summary": "Parity check operation",
                  "value": {
                    "cancellable": true,
                    "description": "Full parity check of the array",
                    "parameters": {
                      "priority": "normal",
                      "type": "check"
                    },
                    "type": "parity_check"
                  }
                },
                "smart_scan": {
                  "summary": "SMART data collection",
                  "value": {
                    "cancellable": true,
                    "description": "Comprehensive SMART data collection for all disks",
                    "type": "smart_scan"
                  }
                }
              },
              "schema": {
                "properties": {
                  "cancellable": {
                    "default": true,
                    "description": "Whether the operation can be cancelled",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Human-readable description of the operation",
                    "example": "Comprehensive SMART data collection for all disks",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": true,
                    "description": "Operation-specific parameters",
                    "examples": [
                      {
                        "priority": "normal",
                        "type": "check"
                      }
                    ],
                    "type": "object"
                  },
                  "type": {
                    "description": "Type of asynchronous operation",
                    "enum": [
                      "parity_check",
                      "parity_correct",
                      "array_start",
                      "array_stop",
                      "disk_scan",
                      "smart_scan",
                      "system_reboot",
                      "system_shutdown",
                      "bulk_container",
                      "bulk_vm"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "meta": {
                          "properties": {
                            "api_version": {
                              "description": "API version",
                              "example": "v1",
                              "type": "string"
                            },
                            "request_id": {
                              "description": "Unique request identifier for tracing",
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "Unix timestamp of the response",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "timestamp",
                            "api_version"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "cancellable": {
                              "description": "Whether the operation can be cancelled",
                              "type": "boolean"
                            },
                            "description": {
                              "description": "Human-readable description",
                              "type": "string"
                            },
                            "id": {
                              "description": "Unique identifier for the operation",
                              "format": "uuid",
                              "type": "string"
                            },
                            "started": {
                              "description": "When the operation was started",
                              "format": "date-time",
                              "type": "string"
                            },
                            "status": {
                              "description": "Current status of the operation",
                              "enum": [
                                "pending",
                                "running",
                                "completed",
                                "failed",
                                "cancelled"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of asynchronous operation",
                              "enum": [
                                "parity_check",
                                "parity_correct",
                                "array_start",
                                "array_stop",
                                "disk_scan",
                                "smart_scan",
                                "system_reboot",
                                "system_shutdown",
                                "bulk_container",
                                "bulk_vm"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Operation started successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "malformed_json": {
                    "summary": "Malformed JSON",
                    "value": {
                      "code": "MALFORMED_JSON",
                      "details": {
                        "column": 12,
                        "line": 5
                      },
                      "error": "Invalid JSON in request body",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "missing_parameter": {
                    "summary": "Missing Required Parameter",
                    "value": {
                      "code": "MISSING_PARAMETER",
                      "details": {
                        "location": "request body",
                        "parameter": "operation"
                      },
                      "error": "Missing required parameter",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "validation_error": {
                    "summary": "Validation Error",
                    "value": {
                      "code": "VALIDATION_ERROR",
                      "details": {
                        "field": "container_ids",
                        "message": "must contain at least 1 item"
                      },
                      "error": "Invalid request parameters",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request - Invalid request parameters or malformed request"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "array_already_started": {
                    "summary": "Array Already Started",
                    "value": {
                      "code": "ARRAY_ALREADY_STARTED",
                      "details": {
                        "current_status": "started",
                        "requested_action": "start"
                      },
                      "error": "Unraid array is already started",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "container_already_running": {
                    "summary": "Container Already Running",
                    "value": {
                      "code": "CONTAINER_ALREADY_RUNNING",
                      "details": {
                        "container_id": "plex",
                        "current_status": "running",
                        "requested_action": "start"
                      },
                      "error": "Container 'plex' is already running",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Conflict - The request conflicts with the current state of the resource"
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "rate_limited": {
                    "summary": "Rate Limit Exceeded",
                    "value": {
                      "code": "RATE_LIMITED",
                      "details": {
                        "limit": 100,
                        "reset_at": "2025-06-16T15:30:00Z",
                        "retry_after": 3600,
                        "window": "1 hour"
                      },
                      "error": "Rate limit exceeded",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "Request limit per time window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "Remaining requests in current window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "Time when rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "summary": "Start async operation",
        "tags": [
          "Async Operations"
        ]
      }
    },
    "/api/v1/operations/stats": {
      "get": {
        "description": "Retrieve statistics about async operations",
        "operationId": "getAsyncOperationStats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "meta": {
                          "properties": {
                            "api_version": {
                              "description": "API version",
                              "example": "v1",
                              "type": "string"
                            },
                            "request_id": {
                              "description": "Unique request identifier for tracing",
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "Unix timestamp of the response",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "timestamp",
                            "api_version"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "by_status": {
                              "additionalProperties": {
                                "type": "integer"
                              },
                              "description": "Count of operations by status",
                              "type": "object"
                            },
                            "by_type": {
                              "additionalProperties": {
                                "type": "integer"
                              },
                              "description": "Count of operations by type",
                              "type": "object"
                            },
                            "max_operations": {
                              "description": "Maximum concurrent operations allowed",
                              "type": "integer"
                            },
                            "total_operations": {
                              "description": "Total number of operations",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Operation statistics retrieved successfully"
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "rate_limited": {
                    "summary": "Rate Limit Exceeded",
                    "value": {
                      "code": "RATE_LIMITED",
                      "details": {
                        "limit": 100,
                        "reset_at": "2025-06-16T15:30:00Z",
                        "retry_after": 3600,
                        "window": "1 hour"
                      },
                      "error": "Rate limit exceeded",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "Request limit per time window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "Remaining requests in current window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "Time when rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "summary": "Get operation statistics",
        "tags": [
          "Async Operations"
        ]
      }
    },
    "/api/v1/operations/{operationId}": {
      "delete": {
        "description": "Cancel a running or pending operation (if cancellable)",
        "operationId": "cancelAsyncOperation",
        "parameters": [
          {
            "description": "Unique identifier of the operation to cancel",
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "example": "4a799a05-bb59-42a1-ab3b-d4ccbfdc623f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "meta": {
                          "properties": {
                            "api_version": {
                              "description": "API version",
                              "example": "v1",
                              "type": "string"
                            },
                            "request_id": {
                              "description": "Unique request identifier for tracing",
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "Unix timestamp of the response",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "timestamp",
                            "api_version"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "message": {
                              "example": "Operation cancelled successfully",
                              "type": "string"
                            },
                            "success": {
                              "example": true,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Operation cancelled successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "malformed_json": {
                    "summary": "Malformed JSON",
                    "value": {
                      "code": "MALFORMED_JSON",
                      "details": {
                        "column": 12,
                        "line": 5
                      },
                      "error": "Invalid JSON in request body",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "missing_parameter": {
                    "summary": "Missing Required Parameter",
                    "value": {
                      "code": "MISSING_PARAMETER",
                      "details": {
                        "location": "request body",
                        "parameter": "operation"
                      },
                      "error": "Missing required parameter",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "validation_error": {
                    "summary": "Validation Error",
                    "value": {
                      "code": "VALIDATION_ERROR",
                      "details": {
                        "field": "container_ids",
                        "message": "must contain at least 1 item"
                      },
                      "error": "Invalid request parameters",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request - Invalid request parameters or malformed request"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "container_not_found": {
                    "summary": "Container Not Found",
                    "value": {
                      "code": "CONTAINER_NOT_FOUND",
                      "details": {
                        "container_id": "nonexistent",
                        "suggestion": "Check container name or ID"
                      },
                      "error": "Container 'nonexistent' not found",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "endpoint_not_found": {
                    "summary": "Endpoint Not Found",
                    "value": {
                      "code": "ENDPOINT_NOT_FOUND",
                      "details": {
                        "path": "/api/v1/nonexistent",
                        "suggestion": "Check API documentation for valid endpoints"
                      },
                      "error": "The requested endpoint does not exist",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "vm_not_found": {
                    "summary": "VM Not Found",
                    "value": {
                      "code": "VM_NOT_FOUND",
                      "details": {
                        "suggestion": "Check VM name or ID",
                        "vm_id": "missing-vm"
                      },
                      "error": "Virtual machine 'missing-vm' not found",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found - The requested resource does not exist"
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "rate_limited": {
                    "summary": "Rate Limit Exceeded",
                    "value": {
                      "code": "RATE_LIMITED",
                      "details": {
                        "limit": 100,
                        "reset_at": "2025-06-16T15:30:00Z",
                        "retry_after": 3600,
                        "window": "1 hour"
                      },
                      "error": "Rate limit exceeded",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "Request limit per time window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "Remaining requests in current window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "Time when rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "summary": "Cancel operation",
        "tags": [
          "Async Operations"
        ]
      },
      "get": {
        "description": "Retrieve detailed information about a specific operation",
        "operationId": "getAsyncOperation",
        "parameters": [
          {
            "description": "Unique identifier of the operation",
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "example": "4a799a05-bb59-42a1-ab3b-d4ccbfdc623f",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "meta": {
                          "properties": {
                            "api_version": {
                              "description": "API version",
                              "example": "v1",
                              "type": "string"
                            },
                            "request_id": {
                              "description": "Unique request identifier for tracing",
                              "type": "string"
                            },
                            "timestamp": {
                              "description": "Unix timestamp of the response",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "timestamp",
                            "api_version"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "cancellable": {
                              "description": "Whether the operation can be cancelled",
                              "type": "boolean"
                            },
                            "completed": {
                              "description": "When the operation completed (if finished)",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "created_by": {
                              "description": "User or system that created the operation",
                              "type": "string"
                            },
                            "description": {
                              "description": "Human-readable description",
                              "type": "string"
                            },
                            "error": {
                              "description": "Error message if operation failed",
                              "nullable": true,
                              "type": "string"
                            },
                            "id": {
                              "description": "Unique identifier for the operation",
                              "format": "uuid",
                              "type": "string"
                            },
                            "progress": {
                              "description": "Progress percentage (0-100)",
                              "maximum": 100,
                              "minimum": 0,
                              "type": "integer"
                            },
                            "result": {
                              "additionalProperties": true,
                              "description": "Operation result data",
                              "nullable": true,
                              "type": "object"
                            },
                            "started": {
                              "description": "When the operation was started",
                              "format": "date-time",
                              "type": "string"
                            },
                            "status": {
                              "description": "Current status of the operation",
                              "enum": [
                                "pending",
                                "running",
                                "completed",
                                "failed",
                                "cancelled"
                              ],
                              "type": "string"
                            },
                            "type": {
                              "description": "Type of asynchronous operation",
                              "enum": [
                                "parity_check",
                                "parity_correct",
                                "array_start",
                                "array_stop",
                                "disk_scan",
                                "smart_scan",
                                "system_reboot",
                                "system_shutdown",
                                "bulk_container",
                                "bulk_vm"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Operation details retrieved successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "container_not_found": {
                    "summary": "Container Not Found",
                    "value": {
                      "code": "CONTAINER_NOT_FOUND",
                      "details": {
                        "container_id": "nonexistent",
                        "suggestion": "Check container name or ID"
                      },
                      "error": "Container 'nonexistent' not found",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "endpoint_not_found": {
                    "summary": "Endpoint Not Found",
                    "value": {
                      "code": "ENDPOINT_NOT_FOUND",
                      "details": {
                        "path": "/api/v1/nonexistent",
                        "suggestion": "Check API documentation for valid endpoints"
                      },
                      "error": "The requested endpoint does not exist",
                      "request_id": "req_1234567890_5678"
                    }
                  },
                  "vm_not_found": {
                    "summary": "VM Not Found",
                    "value": {
                      "code": "VM_NOT_FOUND",
                      "details": {
                        "suggestion": "Check VM name or ID",
                        "vm_id": "missing-vm"
                      },
                      "error": "Virtual machine 'missing-vm' not found",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found - The requested resource does not exist"
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "rate_limited": {
                    "summary": "Rate Limit Exceeded",
                    "value": {
                      "code": "RATE_LIMITED",
                      "details": {
                        "limit": 100,
                        "reset_at": "2025-06-16T15:30:00Z",
                        "retry_after": 3600,
                        "window": "1 hour"
                      },
                      "error": "Rate limit exceeded",
                      "request_id": "req_1234567890_5678"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests - Rate limit exceeded",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "Request limit per time window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "Remaining requests in current window",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "Time when rate limit resets (Unix timestamp)",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "summary": "Get operation details",
        "tags": [
          "Async Operations"
        ]
      }
    },
    "/api/v1/rate-limits/config": {
      "get": {
        "description": "Retrieve current rate limiting configuration and rules",
        "operationId": "getRateLimitConfig",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RateLimitConfig"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Rate limiting configuration retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get rate limiting configuration",
        "tags": [
          "Rate Limiting"
        ]
      },
      "put": {
        "description": "Update rate limiting configuration and rules",
        "operationId": "updateRateLimitConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RateLimitConfigUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RateLimitConfig"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Rate limiting configuration updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Update rate limiting configuration",
        "tags": [
          "Rate Limiting"
        ]
      }
    },
    "/api/v1/rate-limits/stats": {
      "delete": {
        "description": "Reset rate limiting statistics and counters",
        "operationId": "resetRateLimitStats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            },
            "description": "Rate limiting statistics reset successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Reset rate limiting statistics",
        "tags": [
          "Rate Limiting"
        ]
      },
      "get": {
        "description": "Retrieve rate limiting statistics including current usage and blocked requests",
        "operationId": "getRateLimitStats",
        "parameters": [
          {
            "description": "Time range for statistics",
            "in": "query",
            "name": "time_range",
            "required": false,
            "schema": {
              "default": "24h",
              "enum": [
                "1h",
                "24h",
                "7d",
                "30d"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter statistics by client IP address",
            "in": "query",
            "name": "client_ip",
            "required": false,
            "schema": {
              "format": "ipv4",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RateLimitStats"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Rate limiting statistics retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get rate limiting statistics",
        "tags": [
          "Rate Limiting"
        ]
      }
    },
    "/api/v1/scripts": {
      "get": {
        "description": "Retrieve a list of available user scripts and their metadata",
        "operationId": "listScripts",
        "parameters": [
          {
            "description": "Filter scripts by category",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "enum": [
                "user",
                "system",
                "maintenance",
                "backup",
                "monitoring"
              ],
              "type": "string"
            }
          },
          {
            "description": "Show only enabled scripts",
            "in": "query",
            "name": "enabled_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ScriptInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Scripts retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List available scripts",
        "tags": [
          "Scripts"
        ]
      },
      "post": {
        "description": "Create a new script or upload a script file",
        "operationId": "createScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "category": {
                    "enum": [
                      "user",
                      "system",
                      "maintenance",
                      "backup",
                      "monitoring"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "description": "Script description",
                    "type": "string"
                  },
                  "file": {
                    "description": "Script file to upload",
                    "format": "binary",
                    "type": "string"
                  },
                  "name": {
                    "description": "Script name",
                    "type": "string"
                  }
                },
                "required": [
                  "file",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ScriptInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Script created successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Script already exists"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create or upload a script",
        "tags": [
          "Scripts"
        ]
      }
    },
    "/api/v1/scripts/": {
      "get": {
        "description": "Alternative endpoint for listing scripts with trailing slash",
        "operationId": "listScriptsAlt",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ScriptInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Scripts retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List scripts (alternative endpoint)",
        "tags": [
          "Scripts"
        ]
      }
    },
    "/api/v1/shares": {
      "get": {
        "description": "Retrieve a list of configured network shares including SMB, NFS, and AFP shares",
        "operationId": "listShares",
        "parameters": [
          {
            "description": "Filter shares by protocol",
            "in": "query",
            "name": "protocol",
            "required": false,
            "schema": {
              "enum": [
                "smb",
                "nfs",
                "afp",
                "ftp"
              ],
              "type": "string"
            }
          },
          {
            "description": "Show only enabled shares",
            "in": "query",
            "name": "enabled_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ShareInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Shares retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List network shares",
        "tags": [
          "Shares"
        ]
      },
      "post": {
        "description": "Create a new network share configuration",
        "operationId": "createShare",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ShareInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Share created successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Share already exists"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new share",
        "tags": [
          "Shares"
        ]
      }
    },
    "/api/v1/shares/": {
      "get": {
        "description": "Alternative endpoint for listing shares with trailing slash",
        "operationId": "listSharesAlt",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ShareInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Shares retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List shares (alternative endpoint)",
        "tags": [
          "Shares"
        ]
      }
    },
    "/api/v1/storage/array": {
      "get": {
        "description": "Retrieve Unraid array status, state, disk count, and usage information",
        "operationId": "getArrayInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ArrayInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Array information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get array information",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/array/start": {
      "post": {
        "description": "Start the Unraid array with proper orchestration sequence",
        "operationId": "startArray",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArrayOperation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayStatus"
                }
              }
            },
            "description": "Array start operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Start Unraid array",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/array/stop": {
      "post": {
        "description": "Stop the Unraid array with proper orchestration sequence (Docker stop → VM stop → unmount shares → unmount disks → stop parity → mdadm stop)",
        "operationId": "stopArray",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArrayOperation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayStatus"
                }
              }
            },
            "description": "Array stop operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Stop Unraid array",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/cache": {
      "get": {
        "description": "Retrieve cache pool information and disk status",
        "operationId": "getCacheInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CacheInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Cache information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get cache information",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/disks": {
      "get": {
        "description": "Retrieve information about all storage disks including data disks, parity disks, and cache disks",
        "operationId": "listDisks",
        "parameters": [
          {
            "$ref": "#/components/parameters/SMARTParameter"
          },
          {
            "$ref": "#/components/parameters/TemperatureParameter"
          },
          {
            "$ref": "#/components/parameters/VerboseParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/DiskInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Disk list retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List storage disks",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/disks/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific disk including SMART data and temperature",
        "operationId": "getDisk",
        "parameters": [
          {
            "$ref": "#/components/parameters/DiskIDParameter"
          },
          {
            "$ref": "#/components/parameters/SMARTParameter"
          },
          {
            "$ref": "#/components/parameters/TemperatureParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DiskInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Disk information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get disk information",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/overview": {
      "get": {
        "description": "Retrieve comprehensive storage overview including array, parity, cache, disks, and ZFS pools",
        "operationId": "getStorageOverview",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StorageOverview"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Storage overview retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get storage overview",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/parity": {
      "get": {
        "description": "Retrieve parity disk information and check status",
        "operationId": "getParityInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ParityInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Parity information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get parity information",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/parity/check": {
      "get": {
        "description": "Retrieve current parity check status and progress",
        "operationId": "getParityCheck",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ParityCheckInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Parity check status retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get parity check status",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/temperatures": {
      "get": {
        "description": "Retrieve temperature information for all storage disks",
        "operationId": "getDiskTemperatures",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/DiskTemperature"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Disk temperatures retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get disk temperatures",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/zfs/datasets": {
      "get": {
        "description": "Retrieve a list of ZFS datasets with usage information",
        "operationId": "listZFSDatasets",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ZFSDatasetInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "ZFS datasets retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List ZFS datasets",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/storage/zfs/pools": {
      "get": {
        "description": "Retrieve a list of ZFS pools with status and health information",
        "operationId": "listZFSPools",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ZFSPoolInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "ZFS pools retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List ZFS pools",
        "tags": [
          "Storage"
        ]
      }
    },
    "/api/v1/system/cpu": {
      "get": {
        "description": "Retrieve CPU usage, core count, model, frequency, and temperature information",
        "operationId": "getCPUInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CPUInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "CPU information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get CPU information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/execute": {
      "post": {
        "description": "Execute a system command with optional parameters and timeout",
        "operationId": "executeCommand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                }
              }
            },
            "description": "Command executed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Execute system command",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/fans": {
      "get": {
        "description": "Retrieve fan speed data from all available fan sensors",
        "operationId": "getFans",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FanInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Fan data retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get fan information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/filesystems": {
      "get": {
        "description": "Retrieve filesystem mount points and usage information",
        "operationId": "getFilesystems",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FilesystemInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Filesystem information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get filesystem information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/gpu": {
      "get": {
        "description": "Retrieve detailed GPU information including utilization, memory usage, power consumption, clock frequencies, and vendor-specific metrics. Supports Intel (intel_gpu_top), NVIDIA (nvidia-smi), and AMD (rocm-smi) GPUs with real-time monitoring data.",
        "operationId": "getGPUInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/GPUInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "GPU information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get comprehensive GPU monitoring data",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/info": {
      "get": {
        "description": "Retrieve general system information including hostname, kernel, uptime, and load average",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SystemInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get system information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/logs": {
      "get": {
        "description": "Retrieve system logs with optional filtering and pagination",
        "operationId": "getSystemLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/LogLevelParameter"
          },
          {
            "$ref": "#/components/parameters/LogSourceParameter"
          },
          {
            "$ref": "#/components/parameters/SinceParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/LogEntry"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System logs retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get system logs",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/logs/all": {
      "get": {
        "description": "Retrieve comprehensive system logs from all available sources including syslog, kernel, and application logs",
        "operationId": "getAllSystemLogs",
        "parameters": [
          {
            "description": "Number of log lines to retrieve",
            "in": "query",
            "name": "lines",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Retrieve logs since this timestamp",
            "in": "query",
            "name": "since",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter logs by severity level",
            "in": "query",
            "name": "level",
            "required": false,
            "schema": {
              "enum": [
                "emergency",
                "alert",
                "critical",
                "error",
                "warning",
                "notice",
                "info",
                "debug"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SystemLogsAll"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System logs retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all system logs",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/memory": {
      "get": {
        "description": "Retrieve memory usage, total, available, buffers, cached, and swap information",
        "operationId": "getMemoryInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MemoryInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Memory information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get memory information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/network": {
      "get": {
        "description": "Retrieve network interface information and statistics",
        "operationId": "getNetworkInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/NetworkInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Network information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get network information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/reboot": {
      "post": {
        "description": "Initiate system reboot with optional delay and message",
        "operationId": "rebootSystem",
        "parameters": [
          {
            "$ref": "#/components/parameters/ForceParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Reboot system",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/resources": {
      "get": {
        "description": "Retrieve comprehensive system resource information",
        "operationId": "getSystemResources",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SystemResources"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System resources retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get system resources",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/scripts": {
      "get": {
        "description": "Retrieve a list of available system scripts",
        "operationId": "listSystemScripts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/SystemScript"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System scripts retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List system scripts",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/scripts/{id}": {
      "get": {
        "description": "Retrieve details about a specific system script",
        "operationId": "getSystemScript",
        "parameters": [
          {
            "$ref": "#/components/parameters/ScriptIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SystemScript"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "System script details retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get system script details",
        "tags": [
          "System"
        ]
      },
      "post": {
        "description": "Execute a specific system script with optional parameters",
        "operationId": "executeSystemScript",
        "parameters": [
          {
            "$ref": "#/components/parameters/ScriptIDParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptExecutionRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptExecutionResponse"
                }
              }
            },
            "description": "Script executed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Execute system script",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/shutdown": {
      "post": {
        "description": "Initiate system shutdown with optional delay and message",
        "operationId": "shutdownSystem",
        "parameters": [
          {
            "$ref": "#/components/parameters/ForceParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Shutdown system",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/temperature": {
      "get": {
        "description": "Retrieve current temperature data from all available sensors (alias for /api/v1/system/temperatures)",
        "operationId": "getTemperature",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/TemperatureInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Temperature data retrieved successfully"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Temperature sensors unavailable"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get temperature data",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/temperature/alerts": {
      "get": {
        "description": "Retrieve recent temperature alerts and threshold violations",
        "operationId": "getTemperatureAlerts",
        "parameters": [
          {
            "description": "Maximum number of alerts to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter alerts by severity level",
            "in": "query",
            "name": "level",
            "required": false,
            "schema": {
              "enum": [
                "warning",
                "critical",
                "emergency"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "alerts": {
                              "items": {
                                "$ref": "#/components/schemas/TemperatureAlert"
                              },
                              "type": "array"
                            },
                            "count": {
                              "description": "Total number of alerts returned",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Temperature alerts retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get temperature alerts",
        "tags": [
          "System",
          "Monitoring",
          "Alerts"
        ]
      }
    },
    "/api/v1/system/temperature/thresholds": {
      "get": {
        "description": "Retrieve current temperature monitoring thresholds for different sensor types",
        "operationId": "getTemperatureThresholds",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/TemperatureThresholds"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Temperature thresholds retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get temperature thresholds",
        "tags": [
          "System",
          "Monitoring"
        ]
      },
      "put": {
        "description": "Update temperature monitoring thresholds for different sensor types",
        "operationId": "updateTemperatureThresholds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemperatureThresholds"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            },
            "description": "Temperature thresholds updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update temperature thresholds",
        "tags": [
          "System",
          "Monitoring"
        ]
      }
    },
    "/api/v1/system/temperatures": {
      "get": {
        "description": "Retrieve temperature data from all available sensors including CPU, motherboard, and other components",
        "operationId": "getTemperatures",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/TemperatureInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Temperature data retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get temperature sensors",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/system/ups": {
      "get": {
        "description": "Retrieve UPS status, battery charge, runtime, load, and voltage information from apcupsd daemon",
        "operationId": "getUPSInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UPSInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "UPS information retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get UPS information",
        "tags": [
          "System"
        ]
      }
    },
    "/api/v1/vms": {
      "get": {
        "description": "Retrieve a list of virtual machines with their current state and configuration",
        "operationId": "listVMs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/StatusFilterParameter"
          },
          {
            "$ref": "#/components/parameters/VerboseParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/VMInfo"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "List of VMs retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List virtual machines",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/bulk/restart": {
      "post": {
        "description": "Restart multiple virtual machines in a single operation",
        "operationId": "bulkRestartVMs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkVMOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkVMResponse"
                }
              }
            },
            "description": "Bulk VM restart operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Restart multiple virtual machines",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/bulk/start": {
      "post": {
        "description": "Start multiple virtual machines in a single operation",
        "operationId": "bulkStartVMs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkVMOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkVMResponse"
                }
              }
            },
            "description": "Bulk VM start operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Start multiple virtual machines",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/bulk/stop": {
      "post": {
        "description": "Stop multiple virtual machines in a single operation",
        "operationId": "bulkStopVMs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkVMOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkVMResponse"
                }
              }
            },
            "description": "Bulk VM stop operation completed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Stop multiple virtual machines",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}": {
      "get": {
        "description": "Retrieve detailed information about a specific virtual machine",
        "operationId": "getVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          },
          {
            "$ref": "#/components/parameters/VerboseParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VMInfo"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "VM information retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get virtual machine information",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/pause": {
      "post": {
        "description": "Pause a running virtual machine",
        "operationId": "pauseVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMOperationResponse"
                }
              }
            },
            "description": "VM paused successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Pause virtual machine",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/restart": {
      "post": {
        "description": "Restart a virtual machine",
        "operationId": "restartVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMOperationResponse"
                }
              }
            },
            "description": "VM restarted successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Restart virtual machine",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/resume": {
      "post": {
        "description": "Resume a paused virtual machine",
        "operationId": "resumeVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMOperationResponse"
                }
              }
            },
            "description": "VM resumed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Resume virtual machine",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/start": {
      "post": {
        "description": "Start a virtual machine",
        "operationId": "startVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMOperationResponse"
                }
              }
            },
            "description": "VM started successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Start virtual machine",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/stats": {
      "get": {
        "description": "Retrieve performance statistics for a specific virtual machine",
        "operationId": "getVMStats",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VMStats"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "VM statistics retrieved successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get virtual machine statistics",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/vms/{id}/stop": {
      "post": {
        "description": "Stop a virtual machine gracefully or forcefully",
        "operationId": "stopVM",
        "parameters": [
          {
            "$ref": "#/components/parameters/VMIDParameter"
          },
          {
            "$ref": "#/components/parameters/ForceParameter"
          },
          {
            "$ref": "#/components/parameters/TimeoutParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMOperationResponse"
                }
              }
            },
            "description": "VM stopped successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Stop virtual machine",
        "tags": [
          "Virtual Machines"
        ]
      }
    },
    "/api/v1/ws": {
      "get": {
        "description": "Establish WebSocket connection for real-time updates with subscription management. Supports subscribing to specific event channels including system stats, Docker events, storage status, temperature alerts, and more.",
        "operationId": "connectUnifiedWebSocket",
        "parameters": [
          {
            "description": "WebSocket upgrade header",
            "in": "header",
            "name": "Upgrade",
            "required": true,
            "schema": {
              "enum": [
                "websocket"
              ],
              "type": "string"
            }
          },
          {
            "description": "Connection upgrade header",
            "in": "header",
            "name": "Connection",
            "required": true,
            "schema": {
              "enum": [
                "Upgrade"
              ],
              "type": "string"
            }
          },
          {
            "description": "WebSocket key for handshake",
            "in": "header",
            "name": "Sec-WebSocket-Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols - WebSocket connection established"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "426": {
            "description": "Upgrade Required - Invalid WebSocket upgrade request"
          }
        },
        "security": [
          {
            "BearerAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Unified WebSocket connection with subscription management",
        "tags": [
          "WebSocket",
          "Real-time"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "description": "Standardized error code",
                "enum": [
                  "INVALID_REQUEST",
                  "UNAUTHORIZED",
                  "FORBIDDEN",
                  "NOT_FOUND",
                  "CONFLICT",
                  "INTERNAL_ERROR",
                  "SERVICE_UNAVAILABLE",
                  "RATE_LIMIT_EXCEEDED",
                  "VALIDATION_FAILED",
                  "MISSING_PARAMETER",
                  "INVALID_PARAMETER",
                  "PARAMETER_OUT_OF_RANGE",
                  "ARRAY_NOT_STOPPED",
                  "ARRAY_NOT_STARTED",
                  "ARRAY_INVALID_STATE",
                  "DISK_NOT_FOUND",
                  "DISK_OFFLINE",
                  "DISK_READ_ONLY",
                  "PARITY_CHECK_ACTIVE",
                  "PARITY_CHECK_FAILED",
                  "INSUFFICIENT_SPACE",
                  "CONTAINER_NOT_FOUND",
                  "CONTAINER_NOT_RUNNING",
                  "CONTAINER_NOT_STOPPED",
                  "DOCKER_DAEMON_ERROR",
                  "IMAGE_NOT_FOUND",
                  "NETWORK_NOT_FOUND",
                  "VM_NOT_FOUND",
                  "VM_NOT_RUNNING",
                  "VM_NOT_STOPPED",
                  "VM_CONFIG_ERROR",
                  "VIRT_MANAGER_ERROR",
                  "SYSTEM_NOT_READY",
                  "COMMAND_FAILED",
                  "PERMISSION_DENIED",
                  "RESOURCE_BUSY",
                  "HARDWARE_ERROR",
                  "OPERATION_NOT_FOUND",
                  "OPERATION_NOT_CANCELLABLE",
                  "OPERATION_CONFLICT",
                  "OPERATION_TIMEOUT",
                  "MAX_OPERATIONS_REACHED",
                  "INVALID_CREDENTIALS",
                  "TOKEN_EXPIRED",
                  "TOKEN_INVALID",
                  "SESSION_EXPIRED",
                  "CONFIG_NOT_FOUND",
                  "CONFIG_INVALID",
                  "CONFIG_READ_ONLY"
                ],
                "example": "OPERATION_NOT_FOUND",
                "type": "string"
              },
              "details": {
                "additionalProperties": true,
                "description": "Additional error context and debugging information",
                "nullable": true,
                "properties": {
                  "client_ip": {
                    "description": "Client IP address for rate limiting errors",
                    "type": "string"
                  },
                  "conflicting_operation": {
                    "description": "ID or type of conflicting operation",
                    "type": "string"
                  },
                  "limit": {
                    "description": "Rate limit that was exceeded",
                    "properties": {
                      "requests": {
                        "type": "integer"
                      },
                      "window": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "operation_type": {
                    "description": "Type of operation that failed",
                    "type": "string"
                  },
                  "resource_id": {
                    "description": "ID of the resource that caused the error",
                    "type": "string"
                  },
                  "resource_type": {
                    "description": "Type of resource (disk, container, vm, operation, etc.)",
                    "type": "string"
                  },
                  "validation_errors": {
                    "description": "Detailed validation errors for each field",
                    "items": {
                      "$ref": "#/components/schemas/ValidationError"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "message": {
                "description": "Human-readable error message",
                "example": "Operation not found",
                "type": "string"
              }
            },
            "required": [
              "code",
              "message"
            ],
            "type": "object"
          },
          "meta": {
            "properties": {
              "api_version": {
                "description": "API version",
                "example": "v1",
                "type": "string"
              },
              "request_id": {
                "description": "Unique request identifier for tracing",
                "type": "string"
              },
              "timestamp": {
                "description": "Unix timestamp of the response",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "timestamp",
              "api_version"
            ],
            "type": "object"
          }
        },
        "required": [
          "error",
          "meta"
        ],
        "type": "object"
      },
      "APIKeyInfo": {
        "properties": {
          "active": {
            "description": "Whether API key is active",
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "description": "API key creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "API key expiration timestamp",
            "example": "2026-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "API key ID",
            "example": "key_1234567890",
            "type": "string"
          },
          "key": {
            "description": "API key value (only shown on creation)",
            "example": "uma_1234567890abcdef",
            "type": "string"
          },
          "last_used": {
            "description": "Last usage timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "API key name",
            "example": "Home Assistant Integration",
            "type": "string"
          },
          "permissions": {
            "description": "API key permissions",
            "example": [
              "read",
              "write"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "permissions",
          "created_at",
          "active"
        ],
        "type": "object"
      },
      "ArrayDisk": {
        "properties": {
          "device": {
            "description": "Device path",
            "example": "/dev/sda",
            "type": "string"
          },
          "health": {
            "description": "Disk health status",
            "enum": [
              "PASSED",
              "FAILED",
              "UNKNOWN"
            ],
            "example": "PASSED",
            "type": "string"
          },
          "name": {
            "description": "Disk name",
            "example": "disk1",
            "type": "string"
          },
          "serial": {
            "description": "Disk serial number",
            "example": "WD-WCC4N7XXXXXX",
            "type": "string"
          },
          "size": {
            "description": "Disk size (human readable)",
            "example": "8.0 TB",
            "type": "string"
          },
          "smart_data": {
            "additionalProperties": true,
            "description": "SMART data attributes",
            "type": "object"
          },
          "status": {
            "description": "Disk status",
            "enum": [
              "active",
              "standby",
              "spun_down",
              "error",
              "missing"
            ],
            "example": "active",
            "type": "string"
          },
          "temperature": {
            "description": "Disk temperature in Celsius",
            "example": 35,
            "type": "number"
          },
          "type": {
            "description": "Disk type",
            "enum": [
              "data",
              "cache",
              "pool"
            ],
            "example": "data",
            "type": "string"
          }
        },
        "required": [
          "device",
          "name",
          "status",
          "type"
        ],
        "type": "object"
      },
      "ArrayInfo": {
        "properties": {
          "disks": {
            "description": "Array data disks",
            "items": {
              "$ref": "#/components/schemas/ArrayDisk"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-19T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "parity": {
            "description": "Parity disks",
            "items": {
              "$ref": "#/components/schemas/ParityDisk"
            },
            "type": "array"
          },
          "protection": {
            "description": "Array protection level",
            "enum": [
              "parity",
              "dual-parity",
              "none"
            ],
            "example": "parity",
            "type": "string"
          },
          "state": {
            "description": "Array state",
            "enum": [
              "started",
              "stopped",
              "starting",
              "stopping"
            ],
            "example": "started",
            "type": "string"
          },
          "sync_action": {
            "description": "Current synchronization action",
            "enum": [
              "check",
              "check P",
              "resync",
              "none",
              "idle"
            ],
            "example": "check P",
            "type": "string"
          },
          "sync_progress": {
            "description": "Synchronization progress percentage",
            "example": 45.2,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "disks",
          "parity",
          "protection",
          "state",
          "last_updated"
        ],
        "type": "object"
      },
      "ArrayOperation": {
        "properties": {
          "force": {
            "default": false,
            "description": "Force the operation (use with caution)",
            "example": false,
            "type": "boolean"
          },
          "operation": {
            "description": "Array operation to perform",
            "enum": [
              "start",
              "stop"
            ],
            "example": "start",
            "type": "string"
          }
        },
        "required": [
          "operation"
        ],
        "type": "object"
      },
      "ArrayOperationResponse": {
        "properties": {
          "array_status": {
            "description": "Current array status after operation",
            "enum": [
              "started",
              "stopped",
              "starting",
              "stopping"
            ],
            "example": "starting",
            "type": "string"
          },
          "message": {
            "description": "Operation result message",
            "example": "Array started successfully",
            "type": "string"
          },
          "operation": {
            "description": "Array operation performed",
            "enum": [
              "start",
              "stop"
            ],
            "example": "start",
            "type": "string"
          },
          "operation_id": {
            "description": "Async operation ID for tracking",
            "example": "op-array-789",
            "type": "string"
          },
          "success": {
            "description": "Whether the array operation was successful",
            "example": true,
            "type": "boolean"
          },
          "warnings": {
            "description": "Any warnings from the operation",
            "example": [
              "Disk temperature high"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "success",
          "message",
          "operation",
          "array_status"
        ],
        "type": "object"
      },
      "ArrayStatus": {
        "properties": {
          "message": {
            "description": "Operation result message",
            "example": "Array started successfully",
            "type": "string"
          },
          "status": {
            "description": "Current array status",
            "enum": [
              "started",
              "stopped",
              "starting",
              "stopping"
            ],
            "example": "started",
            "type": "string"
          },
          "success": {
            "description": "Whether the operation was successful",
            "example": true,
            "type": "boolean"
          },
          "warnings": {
            "description": "Any warnings from the operation",
            "example": [
              "Disk temperature high"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "success",
          "message",
          "status"
        ],
        "type": "object"
      },
      "AsyncOperationCancelResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "message": {
                    "example": "Operation cancelled successfully",
                    "type": "string"
                  },
                  "success": {
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AsyncOperationDetailResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "cancellable": {
                    "description": "Whether the operation can be cancelled",
                    "type": "boolean"
                  },
                  "completed": {
                    "description": "When the operation completed (if finished)",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "created_by": {
                    "description": "User or system that created the operation",
                    "type": "string"
                  },
                  "description": {
                    "description": "Human-readable description",
                    "type": "string"
                  },
                  "error": {
                    "description": "Error message if operation failed",
                    "nullable": true,
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for the operation",
                    "format": "uuid",
                    "type": "string"
                  },
                  "progress": {
                    "description": "Progress percentage (0-100)",
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "result": {
                    "additionalProperties": true,
                    "description": "Operation result data",
                    "nullable": true,
                    "type": "object"
                  },
                  "started": {
                    "description": "When the operation was started",
                    "format": "date-time",
                    "type": "string"
                  },
                  "status": {
                    "description": "Current status of the operation",
                    "enum": [
                      "pending",
                      "running",
                      "completed",
                      "failed",
                      "cancelled"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of asynchronous operation",
                    "enum": [
                      "parity_check",
                      "parity_correct",
                      "array_start",
                      "array_stop",
                      "disk_scan",
                      "smart_scan",
                      "system_reboot",
                      "system_shutdown",
                      "bulk_container",
                      "bulk_vm"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AsyncOperationListResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "active": {
                    "description": "Number of active operations",
                    "type": "integer"
                  },
                  "completed": {
                    "description": "Number of completed operations",
                    "type": "integer"
                  },
                  "failed": {
                    "description": "Number of failed operations",
                    "type": "integer"
                  },
                  "operations": {
                    "items": {
                      "properties": {
                        "cancellable": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "id": {
                          "format": "uuid",
                          "type": "string"
                        },
                        "progress": {
                          "maximum": 100,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "started": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "status": {
                          "enum": [
                            "pending",
                            "running",
                            "completed",
                            "failed",
                            "cancelled"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "enum": [
                            "parity_check",
                            "parity_correct",
                            "array_start",
                            "array_stop",
                            "disk_scan",
                            "smart_scan",
                            "system_reboot",
                            "system_shutdown",
                            "bulk_container",
                            "bulk_vm"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "total": {
                    "description": "Total number of operations",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AsyncOperationRequest": {
        "properties": {
          "cancellable": {
            "default": true,
            "description": "Whether the operation can be cancelled",
            "type": "boolean"
          },
          "description": {
            "description": "Human-readable description of the operation",
            "example": "Comprehensive SMART data collection for all disks",
            "maxLength": 500,
            "type": "string"
          },
          "parameters": {
            "additionalProperties": true,
            "description": "Operation-specific parameters",
            "examples": [
              {
                "priority": "normal",
                "type": "check"
              }
            ],
            "type": "object"
          },
          "type": {
            "description": "Type of asynchronous operation",
            "enum": [
              "parity_check",
              "parity_correct",
              "array_start",
              "array_stop",
              "disk_scan",
              "smart_scan",
              "system_reboot",
              "system_shutdown",
              "bulk_container",
              "bulk_vm"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AsyncOperationResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "cancellable": {
                    "description": "Whether the operation can be cancelled",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Human-readable description",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique identifier for the operation",
                    "format": "uuid",
                    "type": "string"
                  },
                  "started": {
                    "description": "When the operation was started",
                    "format": "date-time",
                    "type": "string"
                  },
                  "status": {
                    "description": "Current status of the operation",
                    "enum": [
                      "pending",
                      "running",
                      "completed",
                      "failed",
                      "cancelled"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of asynchronous operation",
                    "enum": [
                      "parity_check",
                      "parity_correct",
                      "array_start",
                      "array_stop",
                      "disk_scan",
                      "smart_scan",
                      "system_reboot",
                      "system_shutdown",
                      "bulk_container",
                      "bulk_vm"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AsyncOperationStatsResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "by_status": {
                    "additionalProperties": {
                      "type": "integer"
                    },
                    "description": "Count of operations by status",
                    "type": "object"
                  },
                  "by_type": {
                    "additionalProperties": {
                      "type": "integer"
                    },
                    "description": "Count of operations by type",
                    "type": "object"
                  },
                  "max_operations": {
                    "description": "Maximum concurrent operations allowed",
                    "type": "integer"
                  },
                  "total_operations": {
                    "description": "Total number of operations",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "AuthError": {
        "properties": {
          "details": {
            "additionalProperties": true,
            "description": "Additional error details",
            "example": {
              "attempts_remaining": 2,
              "lockout_duration": 300
            },
            "type": "object"
          },
          "error": {
            "description": "Authentication error message",
            "example": "Invalid credentials",
            "type": "string"
          },
          "error_code": {
            "description": "Authentication error code",
            "enum": [
              "INVALID_CREDENTIALS",
              "TOKEN_EXPIRED",
              "TOKEN_INVALID",
              "INSUFFICIENT_PERMISSIONS",
              "ACCOUNT_DISABLED",
              "RATE_LIMITED"
            ],
            "example": "INVALID_CREDENTIALS",
            "type": "string"
          },
          "timestamp": {
            "description": "Error timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "error",
          "error_code",
          "timestamp"
        ],
        "type": "object"
      },
      "AuthStats": {
        "properties": {
          "active_sessions": {
            "description": "Number of active sessions",
            "example": 2,
            "minimum": 0,
            "type": "integer"
          },
          "active_users": {
            "description": "Number of active users",
            "example": 3,
            "minimum": 0,
            "type": "integer"
          },
          "api_keys": {
            "description": "Number of active API keys",
            "example": 4,
            "minimum": 0,
            "type": "integer"
          },
          "failed_logins_24h": {
            "description": "Failed login attempts in last 24 hours",
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "successful_logins_24h": {
            "description": "Successful logins in last 24 hours",
            "example": 15,
            "minimum": 0,
            "type": "integer"
          },
          "total_users": {
            "description": "Total number of users",
            "example": 5,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "total_users",
          "active_users",
          "active_sessions",
          "api_keys",
          "last_updated"
        ],
        "type": "object"
      },
      "AuthUser": {
        "properties": {
          "active": {
            "description": "Whether user account is active",
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "description": "User creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "User email address",
            "example": "admin@example.com",
            "format": "email",
            "type": "string"
          },
          "full_name": {
            "description": "User full name",
            "example": "System Administrator",
            "type": "string"
          },
          "id": {
            "description": "User ID",
            "example": "user_1234567890",
            "type": "string"
          },
          "last_ip": {
            "description": "Last login IP address",
            "example": "192.168.1.100",
            "type": "string"
          },
          "last_login": {
            "description": "Last login timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "login_count": {
            "description": "Total number of logins",
            "example": 42,
            "minimum": 0,
            "type": "integer"
          },
          "permissions": {
            "description": "User permissions",
            "example": [
              "read",
              "write",
              "admin"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "description": "User role",
            "enum": [
              "admin",
              "user",
              "readonly"
            ],
            "example": "admin",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "role",
          "permissions",
          "active"
        ],
        "type": "object"
      },
      "BootInfo": {
        "properties": {
          "available": {
            "description": "Available space (human readable)",
            "example": "29.9GB",
            "type": "string"
          },
          "device": {
            "description": "Boot device path",
            "example": "/dev/sdb1",
            "type": "string"
          },
          "filesystem": {
            "description": "Boot filesystem type",
            "example": "vfat",
            "type": "string"
          },
          "free": {
            "description": "Free space in bytes",
            "example": 536870912,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "mount_point": {
            "description": "Mount point",
            "example": "/boot",
            "type": "string"
          },
          "size": {
            "description": "Boot device size in bytes",
            "example": 1073741824,
            "minimum": 0,
            "type": "integer"
          },
          "usage": {
            "description": "Usage percentage (alternative field)",
            "example": 6.6,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "usage_percent": {
            "description": "Usage percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used": {
            "description": "Used space in bytes",
            "example": 536870912,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "device",
          "filesystem",
          "size",
          "used",
          "free",
          "usage",
          "available",
          "mount_point",
          "last_updated"
        ],
        "type": "object"
      },
      "BulkOperationRequest": {
        "properties": {
          "container_ids": {
            "description": "Array of container IDs or names",
            "example": [
              "jackett",
              "homeassistant",
              "qbittorrent"
            ],
            "items": {
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]+$",
              "type": "string"
            },
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "container_ids"
        ],
        "type": "object"
      },
      "BulkOperationResponse": {
        "properties": {
          "results": {
            "description": "Individual operation results",
            "items": {
              "$ref": "#/components/schemas/ContainerOperationResult"
            },
            "type": "array"
          },
          "summary": {
            "$ref": "#/components/schemas/BulkOperationSummary"
          }
        },
        "required": [
          "summary",
          "results"
        ],
        "type": "object"
      },
      "BulkOperationSummary": {
        "properties": {
          "failed": {
            "description": "Number of failed operations",
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "operation": {
            "description": "Type of operation performed",
            "enum": [
              "start",
              "stop",
              "restart",
              "pause",
              "resume"
            ],
            "example": "start",
            "type": "string"
          },
          "successful": {
            "description": "Number of successful operations",
            "example": 2,
            "minimum": 0,
            "type": "integer"
          },
          "total": {
            "description": "Total number of operations attempted",
            "example": 3,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "total",
          "successful",
          "failed",
          "operation"
        ],
        "type": "object"
      },
      "BulkVMOperation": {
        "properties": {
          "force": {
            "default": false,
            "description": "Force the operation",
            "example": false,
            "type": "boolean"
          },
          "operation": {
            "description": "Operation to perform on all VMs",
            "enum": [
              "start",
              "stop",
              "restart",
              "pause",
              "resume"
            ],
            "example": "start",
            "type": "string"
          },
          "vm_ids": {
            "description": "Array of VM IDs or names",
            "example": [
              "vm-001",
              "vm-002",
              "Windows-10-Gaming"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "vm_ids",
          "operation"
        ],
        "type": "object"
      },
      "BulkVMResponse": {
        "properties": {
          "results": {
            "description": "Individual operation results",
            "items": {
              "properties": {
                "error": {
                  "description": "Error message if operation failed",
                  "example": "VM not found",
                  "type": "string"
                },
                "message": {
                  "description": "Operation result message",
                  "example": "VM started successfully",
                  "type": "string"
                },
                "state": {
                  "description": "Current VM state after operation",
                  "example": "running",
                  "type": "string"
                },
                "success": {
                  "description": "Whether the operation was successful",
                  "example": true,
                  "type": "boolean"
                },
                "vm_id": {
                  "description": "VM identifier",
                  "example": "vm-001",
                  "type": "string"
                }
              },
              "required": [
                "vm_id",
                "success",
                "message"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "summary": {
            "properties": {
              "failed": {
                "description": "Number of failed operations",
                "example": 1,
                "minimum": 0,
                "type": "integer"
              },
              "operation": {
                "description": "Operation performed",
                "example": "start",
                "type": "string"
              },
              "successful": {
                "description": "Number of successful operations",
                "example": 2,
                "minimum": 0,
                "type": "integer"
              },
              "total": {
                "description": "Total number of VMs processed",
                "example": 3,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "total",
              "successful",
              "failed",
              "operation"
            ],
            "type": "object"
          }
        },
        "required": [
          "summary",
          "results"
        ],
        "type": "object"
      },
      "CPUInfo": {
        "properties": {
          "architecture": {
            "description": "CPU architecture",
            "example": "x86_64",
            "type": "string"
          },
          "cores": {
            "description": "Number of CPU cores",
            "example": 6,
            "minimum": 1,
            "type": "integer"
          },
          "frequency": {
            "description": "Current CPU frequency in MHz",
            "example": 3700,
            "minimum": 0,
            "type": "number"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "load1": {
            "description": "1-minute load average",
            "example": 0.39,
            "minimum": 0,
            "type": "number"
          },
          "load15": {
            "description": "15-minute load average",
            "example": 0.43,
            "minimum": 0,
            "type": "number"
          },
          "load5": {
            "description": "5-minute load average",
            "example": 0.38,
            "minimum": 0,
            "type": "number"
          },
          "model": {
            "description": "CPU model name",
            "example": "Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz",
            "type": "string"
          },
          "temperature": {
            "description": "CPU temperature in Celsius",
            "example": 41,
            "type": "number"
          },
          "threads": {
            "description": "Number of CPU threads",
            "example": 16,
            "minimum": 1,
            "type": "integer"
          },
          "usage": {
            "description": "CPU usage percentage",
            "example": 12.7,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "usage",
          "cores",
          "last_updated"
        ],
        "type": "object"
      },
      "CacheInfo": {
        "properties": {
          "disks": {
            "description": "Cache disks",
            "items": {
              "$ref": "#/components/schemas/DiskInfo"
            },
            "type": "array"
          },
          "free": {
            "description": "Free cache space in bytes",
            "example": 500000000000,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "pool_status": {
            "description": "Cache pool status",
            "enum": [
              "online",
              "degraded",
              "offline",
              "faulted"
            ],
            "example": "online",
            "type": "string"
          },
          "pools": {
            "description": "Cache pools information",
            "items": {
              "properties": {
                "available": {
                  "description": "Available space",
                  "example": "408G",
                  "type": "string"
                },
                "device": {
                  "description": "Pool device",
                  "example": "/dev/nvme0n1p1",
                  "type": "string"
                },
                "health": {
                  "description": "Pool health",
                  "enum": [
                    "healthy",
                    "ONLINE",
                    "DEGRADED",
                    "FAULTED"
                  ],
                  "example": "healthy",
                  "type": "string"
                },
                "mountpoint": {
                  "description": "Pool mountpoint",
                  "example": "/mnt/cache",
                  "type": "string"
                },
                "name": {
                  "description": "Pool name",
                  "example": "cache",
                  "type": "string"
                },
                "size": {
                  "description": "Pool size",
                  "example": "477G",
                  "type": "string"
                },
                "smart_data": {
                  "additionalProperties": true,
                  "description": "SMART data for the pool",
                  "type": "object"
                },
                "temperature": {
                  "description": "Pool temperature",
                  "example": 0,
                  "type": "number"
                },
                "type": {
                  "description": "Pool type",
                  "enum": [
                    "cache",
                    "zfs_cache"
                  ],
                  "example": "cache",
                  "type": "string"
                },
                "usage": {
                  "description": "Usage percentage",
                  "example": "14%",
                  "type": "string"
                },
                "used": {
                  "description": "Used space",
                  "example": "67G",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "size",
                "health"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "total_size": {
            "description": "Total cache size in bytes",
            "example": 1000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "usage_percent": {
            "description": "Cache usage percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used": {
            "description": "Used cache space in bytes",
            "example": 500000000000,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "disks",
          "pool_status",
          "pools",
          "last_updated"
        ],
        "type": "object"
      },
      "ConflictError": {
        "allOf": [
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "description": "Standardized error code",
                    "enum": [
                      "INVALID_REQUEST",
                      "UNAUTHORIZED",
                      "FORBIDDEN",
                      "NOT_FOUND",
                      "CONFLICT",
                      "INTERNAL_ERROR",
                      "SERVICE_UNAVAILABLE",
                      "RATE_LIMIT_EXCEEDED",
                      "VALIDATION_FAILED",
                      "MISSING_PARAMETER",
                      "INVALID_PARAMETER",
                      "PARAMETER_OUT_OF_RANGE",
                      "ARRAY_NOT_STOPPED",
                      "ARRAY_NOT_STARTED",
                      "ARRAY_INVALID_STATE",
                      "DISK_NOT_FOUND",
                      "DISK_OFFLINE",
                      "DISK_READ_ONLY",
                      "PARITY_CHECK_ACTIVE",
                      "PARITY_CHECK_FAILED",
                      "INSUFFICIENT_SPACE",
                      "CONTAINER_NOT_FOUND",
                      "CONTAINER_NOT_RUNNING",
                      "CONTAINER_NOT_STOPPED",
                      "DOCKER_DAEMON_ERROR",
                      "IMAGE_NOT_FOUND",
                      "NETWORK_NOT_FOUND",
                      "VM_NOT_FOUND",
                      "VM_NOT_RUNNING",
                      "VM_NOT_STOPPED",
                      "VM_CONFIG_ERROR",
                      "VIRT_MANAGER_ERROR",
                      "SYSTEM_NOT_READY",
                      "COMMAND_FAILED",
                      "PERMISSION_DENIED",
                      "RESOURCE_BUSY",
                      "HARDWARE_ERROR",
                      "OPERATION_NOT_FOUND",
                      "OPERATION_NOT_CANCELLABLE",
                      "OPERATION_CONFLICT",
                      "OPERATION_TIMEOUT",
                      "MAX_OPERATIONS_REACHED",
                      "INVALID_CREDENTIALS",
                      "TOKEN_EXPIRED",
                      "TOKEN_INVALID",
                      "SESSION_EXPIRED",
                      "CONFIG_NOT_FOUND",
                      "CONFIG_INVALID",
                      "CONFIG_READ_ONLY"
                    ],
                    "example": "OPERATION_NOT_FOUND",
                    "type": "string"
                  },
                  "details": {
                    "additionalProperties": true,
                    "description": "Additional error context and debugging information",
                    "nullable": true,
                    "properties": {
                      "client_ip": {
                        "description": "Client IP address for rate limiting errors",
                        "type": "string"
                      },
                      "conflicting_operation": {
                        "description": "ID or type of conflicting operation",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Rate limit that was exceeded",
                        "properties": {
                          "requests": {
                            "type": "integer"
                          },
                          "window": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "operation_type": {
                        "description": "Type of operation that failed",
                        "type": "string"
                      },
                      "resource_id": {
                        "description": "ID of the resource that caused the error",
                        "type": "string"
                      },
                      "resource_type": {
                        "description": "Type of resource (disk, container, vm, operation, etc.)",
                        "type": "string"
                      },
                      "validation_errors": {
                        "description": "Detailed validation errors for each field",
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "example": "Operation not found",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "required": [
              "error",
              "meta"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": [
                      "ARRAY_NOT_STOPPED",
                      "ARRAY_NOT_STARTED",
                      "OPERATION_CONFLICT",
                      "PARITY_CHECK_ACTIVE"
                    ],
                    "type": "string"
                  },
                  "details": {
                    "properties": {
                      "conflicting_operation": {
                        "description": "ID or description of the conflicting operation",
                        "type": "string"
                      },
                      "required_state": {
                        "description": "Required state for the operation to proceed",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "ContainerInfo": {
        "properties": {
          "created": {
            "description": "Container creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "environment": {
            "description": "Environment variables",
            "example": [
              "PATH=/usr/local/sbin:/usr/local/bin",
              "HOME=/root"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Container ID",
            "example": "1234567890ab",
            "pattern": "^[a-f0-9]{12}$",
            "type": "string"
          },
          "image": {
            "description": "Container image",
            "example": "lscr.io/linuxserver/jackett",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Container labels",
            "type": "object"
          },
          "mounts": {
            "items": {
              "properties": {
                "destination": {
                  "type": "string"
                },
                "mode": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "description": "Container name",
            "example": "jackett",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]+$",
            "type": "string"
          },
          "networks": {
            "description": "Network configurations",
            "items": {
              "properties": {
                "ip_address": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "ports": {
            "description": "Container port mappings",
            "items": {
              "$ref": "#/components/schemas/ContainerPort"
            },
            "type": "array"
          },
          "restart_policy": {
            "description": "Container restart policy",
            "enum": [
              "no",
              "always",
              "unless-stopped",
              "on-failure"
            ],
            "example": "unless-stopped",
            "type": "string"
          },
          "started_at": {
            "description": "Container start timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ContainerState"
          },
          "status": {
            "description": "Container status",
            "enum": [
              "created",
              "running",
              "paused",
              "restarting",
              "removing",
              "exited",
              "dead"
            ],
            "example": "running",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created"
        ],
        "type": "object"
      },
      "ContainerOperationResponse": {
        "properties": {
          "container_id": {
            "description": "Container ID or name",
            "example": "container1",
            "type": "string"
          },
          "message": {
            "description": "Operation result message",
            "example": "Container started successfully",
            "type": "string"
          },
          "success": {
            "description": "Whether the operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "container_id"
        ],
        "type": "object"
      },
      "ContainerOperationResult": {
        "properties": {
          "container_id": {
            "description": "Container ID or name",
            "example": "container1",
            "type": "string"
          },
          "error": {
            "description": "Error message if operation failed",
            "example": "Container not found",
            "type": "string"
          },
          "message": {
            "description": "Operation result message",
            "example": "Container started successfully",
            "type": "string"
          },
          "success": {
            "description": "Whether the operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "container_id",
          "success"
        ],
        "type": "object"
      },
      "ContainerPort": {
        "properties": {
          "ip": {
            "description": "Bind IP address",
            "example": "0.0.0.0",
            "type": "string"
          },
          "private_port": {
            "description": "Container internal port",
            "example": 32400,
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "public_port": {
            "description": "Host external port",
            "example": 32400,
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "type": {
            "description": "Port protocol",
            "enum": [
              "tcp",
              "udp"
            ],
            "example": "tcp",
            "type": "string"
          }
        },
        "required": [
          "private_port",
          "type"
        ],
        "type": "object"
      },
      "ContainerState": {
        "properties": {
          "exit_code": {
            "description": "Container exit code",
            "example": 0,
            "type": "integer"
          },
          "finished_at": {
            "description": "Container finish timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "paused": {
            "description": "Whether the container is paused",
            "example": false,
            "type": "boolean"
          },
          "pid": {
            "description": "Container process ID",
            "example": 1234,
            "type": "integer"
          },
          "restarting": {
            "description": "Whether the container is restarting",
            "example": false,
            "type": "boolean"
          },
          "running": {
            "description": "Whether the container is running",
            "example": true,
            "type": "boolean"
          },
          "started_at": {
            "description": "Container start timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Container state status",
            "example": "running",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiagnosticsHealth": {
        "properties": {
          "checks": {
            "description": "List of individual health checks",
            "items": {
              "properties": {
                "critical": {
                  "description": "Whether this is a critical check",
                  "example": false,
                  "type": "boolean"
                },
                "last_updated": {
                  "description": "When this check was last performed",
                  "example": "2024-01-01T12:00:00Z",
                  "format": "date-time",
                  "type": "string"
                },
                "message": {
                  "description": "Descriptive message about the check result",
                  "example": "All disks are healthy",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the health check",
                  "example": "disk_health",
                  "type": "string"
                },
                "remediation": {
                  "description": "Suggested remediation steps",
                  "example": "No action required",
                  "type": "string"
                },
                "status": {
                  "description": "Status of this check",
                  "enum": [
                    "passed",
                    "warning",
                    "critical",
                    "unknown"
                  ],
                  "example": "passed",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "status",
                "message"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "last_check": {
            "description": "When the health check was last performed",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Overall health message",
            "example": "System is healthy",
            "type": "string"
          },
          "status": {
            "description": "Overall health status",
            "enum": [
              "healthy",
              "warning",
              "critical",
              "unknown"
            ],
            "example": "healthy",
            "type": "string"
          }
        },
        "required": [
          "status",
          "checks",
          "last_check"
        ],
        "type": "object"
      },
      "DiagnosticsInfo": {
        "properties": {
          "capabilities": {
            "description": "Available diagnostic capabilities",
            "example": [
              "health_checks",
              "system_repair",
              "log_analysis"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "diagnostics": {
            "description": "Diagnostics system status",
            "example": "enabled",
            "type": "string"
          },
          "last_run": {
            "description": "When diagnostics were last run",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "description": "Diagnostic system message",
            "example": "Diagnostics system operational",
            "type": "string"
          },
          "system": {
            "description": "System identifier",
            "example": "uma",
            "type": "string"
          },
          "version": {
            "description": "UMA version",
            "example": "1.0.0",
            "type": "string"
          }
        },
        "required": [
          "version",
          "system",
          "diagnostics"
        ],
        "type": "object"
      },
      "DiagnosticsRepair": {
        "properties": {
          "action": {
            "description": "Repair action that was performed",
            "example": "fix_permissions",
            "type": "string"
          },
          "details": {
            "description": "Detailed repair steps performed",
            "example": [
              "Fixed /var/log permissions",
              "Corrected disk mount points"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "duration": {
            "description": "Duration of repair operation in seconds",
            "example": 5.2,
            "type": "number"
          },
          "message": {
            "description": "Result message from the repair operation",
            "example": "Permissions fixed successfully",
            "type": "string"
          },
          "status": {
            "description": "Status of the repair operation",
            "enum": [
              "success",
              "failed",
              "partial",
              "in_progress"
            ],
            "example": "success",
            "type": "string"
          },
          "timestamp": {
            "description": "When the repair was performed",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "action",
          "status",
          "message",
          "timestamp"
        ],
        "type": "object"
      },
      "DiskInfo": {
        "properties": {
          "device": {
            "description": "Device path",
            "example": "/dev/sda",
            "type": "string"
          },
          "filesystem": {
            "description": "Filesystem type",
            "example": "xfs",
            "type": "string"
          },
          "free": {
            "description": "Free space in bytes",
            "example": 4000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "health": {
            "description": "Disk health status",
            "enum": [
              "healthy",
              "unknown",
              "warning",
              "critical"
            ],
            "example": "healthy",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "model": {
            "description": "Disk model",
            "example": "WDC WD80EFAX-68LHPN0",
            "type": "string"
          },
          "name": {
            "description": "Disk name",
            "example": "disk1",
            "pattern": "^(disk|parity|cache)\\d*$",
            "type": "string"
          },
          "serial": {
            "description": "Disk serial number",
            "example": "WD-WCC4N7XXXXXX",
            "type": "string"
          },
          "size": {
            "description": "Disk size in bytes",
            "example": 8000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "smart": {
            "$ref": "#/components/schemas/SMARTData"
          },
          "smart_data": {
            "description": "SMART monitoring data",
            "properties": {
              "attributes": {
                "additionalProperties": {
                  "type": "number"
                },
                "description": "SMART attributes",
                "example": {
                  "power_cycle_count": 241,
                  "power_on_hours": 18762
                },
                "type": "object"
              },
              "available": {
                "description": "Whether SMART data is available",
                "example": true,
                "type": "boolean"
              },
              "status": {
                "description": "SMART status",
                "enum": [
                  "passed",
                  "failed",
                  "unknown"
                ],
                "example": "passed",
                "type": "string"
              }
            },
            "required": [
              "available",
              "status"
            ],
            "type": "object"
          },
          "status": {
            "description": "Disk status",
            "enum": [
              "active",
              "standby",
              "spun_down",
              "error",
              "missing"
            ],
            "example": "active",
            "type": "string"
          },
          "temperature": {
            "description": "Disk temperature in Celsius",
            "example": 35,
            "type": "number"
          },
          "type": {
            "description": "Disk type",
            "enum": [
              "disk",
              "parity",
              "cache",
              "pool"
            ],
            "example": "disk",
            "type": "string"
          },
          "usage_percent": {
            "description": "Usage percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used": {
            "description": "Used space in bytes",
            "example": 4000000000000,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "device",
          "size",
          "status",
          "health",
          "type",
          "smart_data",
          "last_updated"
        ],
        "type": "object"
      },
      "DiskList": {
        "description": "List of storage disks",
        "example": [
          {
            "device": "/dev/sda",
            "name": "disk1",
            "size": 8000000000000,
            "status": "active"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/DiskInfo"
        },
        "type": "array"
      },
      "DiskTemperature": {
        "properties": {
          "device": {
            "description": "Device path",
            "example": "/dev/sda",
            "type": "string"
          },
          "disk": {
            "description": "Disk identifier",
            "example": "disk1",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "max_temperature": {
            "description": "Maximum safe temperature",
            "example": 60,
            "type": "number"
          },
          "status": {
            "description": "Temperature status",
            "enum": [
              "normal",
              "warm",
              "hot",
              "critical"
            ],
            "example": "normal",
            "type": "string"
          },
          "temperature": {
            "description": "Current temperature in Celsius",
            "example": 35,
            "type": "number"
          }
        },
        "required": [
          "disk",
          "device",
          "temperature",
          "status",
          "last_updated"
        ],
        "type": "object"
      },
      "DockerContainerInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContainerInfo"
          },
          {
            "properties": {
              "logs": {
                "description": "Recent container logs",
                "example": [
                  "Container started",
                  "Service initialized"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "stats": {
                "description": "Container resource statistics",
                "properties": {
                  "cpu_percent": {
                    "description": "CPU usage percentage",
                    "example": 15.5,
                    "type": "number"
                  },
                  "memory_limit": {
                    "description": "Memory limit in bytes",
                    "example": 1073741824,
                    "type": "integer"
                  },
                  "memory_usage": {
                    "description": "Memory usage in bytes",
                    "example": 134217728,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "DockerContainerList": {
        "description": "List of Docker containers",
        "example": [
          {
            "id": "1234567890ab",
            "name": "jackett",
            "status": "running"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/ContainerInfo"
        },
        "type": "array"
      },
      "DockerImage": {
        "properties": {
          "created": {
            "description": "Image creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Image ID",
            "example": "sha256:1234567890ab",
            "type": "string"
          },
          "repo_tags": {
            "description": "Repository tags",
            "example": [
              "lscr.io/linuxserver/jackett:latest"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "size": {
            "description": "Image size in bytes",
            "example": 1073741824,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "repo_tags",
          "size",
          "created"
        ],
        "type": "object"
      },
      "DockerImageList": {
        "description": "List of Docker images",
        "example": [
          {
            "id": "sha256:abc123",
            "size": 142000000,
            "tags": [
              "organization/application:latest"
            ]
          }
        ],
        "items": {
          "$ref": "#/components/schemas/DockerImage"
        },
        "type": "array"
      },
      "DockerInfo": {
        "properties": {
          "Architecture": {
            "description": "System architecture",
            "example": "x86_64",
            "type": "string"
          },
          "BridgeNfIp6tables": {
            "description": "Bridge netfilter ip6tables support",
            "example": false,
            "type": "boolean"
          },
          "BridgeNfIptables": {
            "description": "Bridge netfilter iptables support",
            "example": false,
            "type": "boolean"
          },
          "CDISpecDirs": {
            "description": "CDI specification directories",
            "example": [
              "/etc/cdi",
              "/var/run/cdi"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "CPUSet": {
            "description": "CPU set support",
            "example": true,
            "type": "boolean"
          },
          "CPUShares": {
            "description": "CPU shares support",
            "example": true,
            "type": "boolean"
          },
          "CgroupDriver": {
            "description": "Cgroup driver",
            "example": "systemd",
            "type": "string"
          },
          "CgroupVersion": {
            "description": "Cgroup version",
            "example": "2",
            "type": "string"
          },
          "ClientInfo": {
            "additionalProperties": true,
            "description": "Docker client information",
            "type": "object"
          },
          "Containerd": {
            "additionalProperties": true,
            "description": "Containerd information",
            "type": "object"
          },
          "ContainerdCommit": {
            "description": "Containerd commit information",
            "properties": {
              "Expected": {
                "description": "Expected containerd version",
                "example": "v1.7.24-0-g61f9fd88",
                "type": "string"
              },
              "ID": {
                "description": "Containerd commit ID",
                "example": "v1.7.24-0-g61f9fd88",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Containers": {
            "description": "Total containers (alternative field)",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "ContainersPaused": {
            "description": "Paused containers (alternative field)",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "ContainersRunning": {
            "description": "Running containers (alternative field)",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "ContainersStopped": {
            "description": "Stopped containers (alternative field)",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "CpuCfsPeriod": {
            "description": "CPU CFS period support",
            "example": true,
            "type": "boolean"
          },
          "CpuCfsQuota": {
            "description": "CPU CFS quota support",
            "example": true,
            "type": "boolean"
          },
          "Debug": {
            "description": "Debug mode enabled",
            "example": false,
            "type": "boolean"
          },
          "DefaultRuntime": {
            "description": "Default container runtime",
            "example": "runc",
            "type": "string"
          },
          "DockerRootDir": {
            "description": "Docker root directory",
            "example": "/var/lib/docker",
            "type": "string"
          },
          "Driver": {
            "description": "Storage driver",
            "example": "btrfs",
            "type": "string"
          },
          "DriverStatus": {
            "description": "Driver status",
            "example": [
              [
                "Btrfs",
                ""
              ]
            ],
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "ExperimentalBuild": {
            "description": "Experimental build flag",
            "example": false,
            "type": "boolean"
          },
          "GenericResources": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Generic resources (null if none)",
            "example": []
          },
          "HttpProxy": {
            "description": "HTTP proxy setting",
            "example": "",
            "type": "string"
          },
          "HttpsProxy": {
            "description": "HTTPS proxy setting",
            "example": "",
            "type": "string"
          },
          "ID": {
            "description": "Docker daemon ID",
            "example": "dcf99289-02ab-4aaf-b8f6-562f8ca37734",
            "type": "string"
          },
          "IPv4Forwarding": {
            "description": "IPv4 forwarding enabled",
            "example": true,
            "type": "boolean"
          },
          "Images": {
            "description": "Total images (alternative field)",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "IndexServerAddress": {
            "description": "Index server address",
            "example": "https://index.docker.io/v1/",
            "type": "string"
          },
          "InitBinary": {
            "description": "Init binary path",
            "example": "docker-init",
            "type": "string"
          },
          "InitCommit": {
            "description": "Init commit information",
            "properties": {
              "Expected": {
                "description": "Expected init version",
                "example": "de40ad0",
                "type": "string"
              },
              "ID": {
                "description": "Init commit ID",
                "example": "de40ad0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Isolation": {
            "description": "Container isolation",
            "example": "",
            "type": "string"
          },
          "KernelVersion": {
            "description": "Kernel version",
            "example": "6.12.24-Unraid",
            "type": "string"
          },
          "Labels": {
            "description": "Docker daemon labels",
            "example": [],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "LiveRestoreEnabled": {
            "description": "Live restore enabled",
            "example": false,
            "type": "boolean"
          },
          "LoggingDriver": {
            "description": "Logging driver",
            "example": "json-file",
            "type": "string"
          },
          "MemTotal": {
            "description": "Total memory in bytes",
            "example": 67645440000,
            "minimum": 0,
            "type": "integer"
          },
          "MemoryLimit": {
            "description": "Memory limit support",
            "example": true,
            "type": "boolean"
          },
          "NCPU": {
            "description": "Number of CPUs",
            "example": 12,
            "minimum": 1,
            "type": "integer"
          },
          "NEventsListener": {
            "description": "Number of events listeners",
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "NFd": {
            "description": "Number of file descriptors",
            "example": 125,
            "minimum": 0,
            "type": "integer"
          },
          "NGoroutines": {
            "description": "Number of goroutines",
            "example": 153,
            "minimum": 0,
            "type": "integer"
          },
          "Name": {
            "description": "Docker daemon name",
            "example": "Cube",
            "type": "string"
          },
          "NoProxy": {
            "description": "No proxy setting",
            "example": "",
            "type": "string"
          },
          "OSType": {
            "description": "Operating system type",
            "example": "linux",
            "type": "string"
          },
          "OSVersion": {
            "description": "OS version",
            "example": "7.1",
            "type": "string"
          },
          "OomKillDisable": {
            "description": "OOM kill disable support",
            "example": true,
            "type": "boolean"
          },
          "OperatingSystem": {
            "description": "Operating system",
            "example": "Unraid OS 7.1 x86_64",
            "type": "string"
          },
          "PidsLimit": {
            "description": "PIDs limit support",
            "example": true,
            "type": "boolean"
          },
          "Plugins": {
            "additionalProperties": true,
            "description": "Docker plugins",
            "type": "object"
          },
          "ProductLicense": {
            "description": "Product license",
            "example": "Community Engine",
            "type": "string"
          },
          "RegistryConfig": {
            "additionalProperties": true,
            "description": "Registry configuration",
            "type": "object"
          },
          "RuncCommit": {
            "description": "Runc commit information",
            "properties": {
              "Expected": {
                "description": "Expected runc version",
                "example": "v1.2.4-0-g6c52b3f",
                "type": "string"
              },
              "ID": {
                "description": "Runc commit ID",
                "example": "v1.2.4-0-g6c52b3f",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Runtimes": {
            "additionalProperties": true,
            "description": "Available container runtimes",
            "type": "object"
          },
          "SecurityOptions": {
            "description": "Security options",
            "example": [
              "name=seccomp,profile=builtin",
              "name=cgroupns"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ServerVersion": {
            "description": "Server version (alternative field)",
            "example": "27.5.1",
            "type": "string"
          },
          "SwapLimit": {
            "description": "Swap limit support",
            "example": false,
            "type": "boolean"
          },
          "Swarm": {
            "additionalProperties": true,
            "description": "Docker swarm information",
            "type": "object"
          },
          "SystemTime": {
            "description": "System time",
            "example": "2025-06-20T10:57:01Z",
            "format": "date-time",
            "type": "string"
          },
          "Warnings": {
            "description": "Docker daemon warnings",
            "example": [],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "containers": {
            "description": "Total number of containers",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "containers_paused": {
            "description": "Number of paused containers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "containers_running": {
            "description": "Number of running containers",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "containers_stopped": {
            "description": "Number of stopped containers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "images": {
            "description": "Total number of images",
            "example": 13,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-20T01:06:25Z",
            "format": "date-time",
            "type": "string"
          },
          "server_version": {
            "description": "Docker server version",
            "example": "27.5.1",
            "type": "string"
          }
        },
        "required": [
          "containers",
          "containers_running",
          "containers_paused",
          "containers_stopped",
          "images"
        ],
        "type": "object"
      },
      "DockerNetwork": {
        "properties": {
          "driver": {
            "description": "Network driver",
            "example": "bridge",
            "type": "string"
          },
          "id": {
            "description": "Network ID",
            "example": "1234567890ab",
            "type": "string"
          },
          "name": {
            "description": "Network name",
            "example": "bridge",
            "type": "string"
          },
          "scope": {
            "description": "Network scope",
            "example": "local",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "driver"
        ],
        "type": "object"
      },
      "DockerNetworkList": {
        "description": "List of Docker networks",
        "example": [
          {
            "driver": "bridge",
            "id": "network123",
            "name": "bridge"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/DockerNetwork"
        },
        "type": "array"
      },
      "DockerOperationResponse": {
        "properties": {
          "container_id": {
            "description": "Container ID or name",
            "example": "plex",
            "type": "string"
          },
          "container_status": {
            "description": "Current container status after operation",
            "enum": [
              "created",
              "running",
              "paused",
              "restarting",
              "removing",
              "exited",
              "dead"
            ],
            "example": "running",
            "type": "string"
          },
          "duration": {
            "description": "Operation duration in seconds",
            "example": 2.5,
            "minimum": 0,
            "type": "number"
          },
          "message": {
            "description": "Operation result message",
            "example": "Container started successfully",
            "type": "string"
          },
          "operation": {
            "description": "Docker operation performed",
            "enum": [
              "start",
              "stop",
              "restart",
              "pause",
              "resume"
            ],
            "example": "start",
            "type": "string"
          },
          "success": {
            "description": "Whether the Docker operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "container_id",
          "operation"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "code": {
            "description": "Machine-readable error code for programmatic handling",
            "example": "INVALID_REQUEST",
            "type": "string"
          },
          "details": {
            "additionalProperties": true,
            "description": "Additional error details and context",
            "example": {
              "field": "container_ids",
              "message": "must contain at least 1 item"
            },
            "type": "object"
          },
          "error": {
            "description": "Human-readable error message",
            "example": "Invalid request parameters",
            "type": "string"
          },
          "request_id": {
            "description": "Request ID for error tracking",
            "example": "req_1234567890_5678",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "ExecuteRequest": {
        "properties": {
          "command": {
            "description": "Command to execute",
            "example": "ls -la /mnt/user",
            "maxLength": 1000,
            "type": "string"
          },
          "timeout": {
            "default": 30,
            "description": "Command timeout in seconds",
            "example": 30,
            "maximum": 300,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "command"
        ],
        "type": "object"
      },
      "ExecuteResponse": {
        "properties": {
          "duration": {
            "description": "Command execution duration in seconds",
            "example": 0.125,
            "minimum": 0,
            "type": "number"
          },
          "exit_code": {
            "description": "Command exit code",
            "example": 0,
            "type": "integer"
          },
          "stderr": {
            "description": "Command standard error",
            "example": "",
            "type": "string"
          },
          "stdout": {
            "description": "Command standard output",
            "example": "total 4\ndrwxrwxrwx 1 root root 28 Jun 16 14:30 .",
            "type": "string"
          },
          "success": {
            "description": "Whether the command executed successfully",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "exit_code",
          "stdout",
          "stderr",
          "duration"
        ],
        "type": "object"
      },
      "FanData": {
        "properties": {
          "fans": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FanInput"
            },
            "description": "Fan sensors",
            "type": "object"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "fans",
          "last_updated"
        ],
        "type": "object"
      },
      "FanInfo": {
        "properties": {
          "fans": {
            "items": {
              "properties": {
                "max_speed": {
                  "description": "Maximum fan speed",
                  "example": 3000,
                  "type": "number"
                },
                "min_speed": {
                  "description": "Minimum fan speed",
                  "example": 0,
                  "type": "number"
                },
                "name": {
                  "description": "Fan name/label",
                  "example": "CPU Fan",
                  "type": "string"
                },
                "speed": {
                  "description": "Current fan speed in RPM",
                  "example": 1200,
                  "minimum": 0,
                  "type": "number"
                },
                "status": {
                  "description": "Fan status",
                  "enum": [
                    "normal",
                    "warning",
                    "critical",
                    "unknown"
                  ],
                  "example": "normal",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "speed",
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "fans",
          "last_updated"
        ],
        "type": "object"
      },
      "FanInput": {
        "properties": {
          "current": {
            "description": "Current fan speed in RPM",
            "example": 1200,
            "minimum": 0,
            "type": "number"
          },
          "label": {
            "description": "Fan label",
            "example": "CPU Fan",
            "type": "string"
          },
          "max": {
            "description": "Maximum fan speed",
            "example": 3000,
            "type": "number"
          },
          "min": {
            "description": "Minimum fan speed",
            "example": 0,
            "type": "number"
          }
        },
        "required": [
          "label",
          "current"
        ],
        "type": "object"
      },
      "FilesystemInfo": {
        "properties": {
          "filesystems": {
            "items": {
              "properties": {
                "available": {
                  "description": "Available space in bytes",
                  "example": 549755813888,
                  "minimum": 0,
                  "type": "integer"
                },
                "device": {
                  "description": "Device name",
                  "example": "/dev/sda1",
                  "type": "string"
                },
                "fstype": {
                  "description": "Filesystem type",
                  "example": "xfs",
                  "type": "string"
                },
                "mountpoint": {
                  "description": "Mount point",
                  "example": "/mnt/disk1",
                  "type": "string"
                },
                "size": {
                  "description": "Total size in bytes",
                  "example": 1099511627776,
                  "minimum": 0,
                  "type": "integer"
                },
                "usage_percent": {
                  "description": "Usage percentage",
                  "example": 50,
                  "maximum": 100,
                  "minimum": 0,
                  "type": "number"
                },
                "used": {
                  "description": "Used space in bytes",
                  "example": 549755813888,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "filesystems",
          "last_updated"
        ],
        "type": "object"
      },
      "GPU": {
        "properties": {
          "clocks": {
            "$ref": "#/components/schemas/GPUClocks",
            "description": "GPU clock frequencies"
          },
          "driver": {
            "description": "GPU driver name",
            "example": "iwlwifi",
            "type": "string"
          },
          "engines": {
            "$ref": "#/components/schemas/GPUEngines",
            "description": "GPU engine utilization (Intel-specific)"
          },
          "index": {
            "description": "GPU index/ID",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-19T02:53:23Z",
            "format": "date-time",
            "type": "string"
          },
          "memory": {
            "$ref": "#/components/schemas/GPUMemory",
            "description": "GPU memory information"
          },
          "name": {
            "description": "GPU name/model",
            "example": "Intel Corporation CoffeeLake-S GT2 [UHD Graphics 630]",
            "type": "string"
          },
          "power": {
            "$ref": "#/components/schemas/GPUPower",
            "description": "GPU power consumption information"
          },
          "status": {
            "description": "GPU status",
            "enum": [
              "active",
              "idle",
              "error",
              "unknown"
            ],
            "example": "active",
            "type": "string"
          },
          "temperature": {
            "description": "GPU temperature in Celsius",
            "example": 40,
            "type": "integer"
          },
          "type": {
            "description": "GPU type",
            "enum": [
              "integrated",
              "discrete"
            ],
            "example": "integrated",
            "type": "string"
          },
          "usage": {
            "description": "Overall GPU utilization percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "uuid": {
            "description": "GPU UUID (if available)",
            "example": "GPU-12345678-1234-1234-1234-123456789abc",
            "type": "string"
          },
          "vendor": {
            "description": "GPU vendor",
            "enum": [
              "Intel",
              "NVIDIA",
              "AMD"
            ],
            "example": "Intel",
            "type": "string"
          }
        },
        "required": [
          "index",
          "name",
          "vendor",
          "type",
          "driver",
          "usage",
          "temperature",
          "status",
          "last_updated"
        ],
        "type": "object"
      },
      "GPUClocks": {
        "properties": {
          "core": {
            "description": "Core clock frequency in MHz",
            "example": 1200,
            "minimum": 0,
            "type": "integer"
          },
          "memory": {
            "description": "Memory clock frequency in MHz",
            "example": 1750,
            "minimum": 0,
            "type": "integer"
          },
          "shader": {
            "description": "Shader clock frequency in MHz",
            "example": 1500,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GPUEngines": {
        "description": "GPU engine utilization percentages (Intel-specific)",
        "properties": {
          "blitter": {
            "description": "Blitter engine utilization percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "render": {
            "description": "Render/3D engine utilization percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "video": {
            "description": "Video decode engine utilization percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "video_enhance": {
            "description": "Video enhancement engine utilization percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "GPUInfo": {
        "properties": {
          "gpus": {
            "description": "List of detected GPUs with comprehensive monitoring data",
            "items": {
              "$ref": "#/components/schemas/GPU"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-19T02:53:23Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "gpus",
          "last_updated"
        ],
        "type": "object"
      },
      "GPUMemory": {
        "properties": {
          "free_bytes": {
            "description": "Free GPU memory in bytes",
            "example": 6442450944,
            "minimum": 0,
            "type": "integer"
          },
          "free_formatted": {
            "description": "Human-readable free memory",
            "example": "6 GB",
            "type": "string"
          },
          "total_bytes": {
            "description": "Total GPU memory in bytes",
            "example": 8589934592,
            "minimum": 0,
            "type": "integer"
          },
          "total_formatted": {
            "description": "Human-readable total memory",
            "example": "8 GB",
            "type": "string"
          },
          "usage_percent": {
            "description": "Memory usage percentage",
            "example": 25,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used_bytes": {
            "description": "Used GPU memory in bytes",
            "example": 2147483648,
            "minimum": 0,
            "type": "integer"
          },
          "used_formatted": {
            "description": "Human-readable used memory",
            "example": "2 GB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GPUPower": {
        "properties": {
          "draw_formatted": {
            "description": "Human-readable power draw",
            "example": "150.5 W",
            "type": "string"
          },
          "draw_watts": {
            "description": "Current power draw in watts",
            "example": 150.5,
            "minimum": 0,
            "type": "number"
          },
          "limit_formatted": {
            "description": "Human-readable power limit",
            "example": "200 W",
            "type": "string"
          },
          "limit_watts": {
            "description": "Power limit in watts",
            "example": 200,
            "minimum": 0,
            "type": "number"
          },
          "usage_percent": {
            "description": "Power usage percentage of limit",
            "example": 75.25,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "HealthResponse": {
        "properties": {
          "checks": {
            "description": "Status of service health checks",
            "properties": {
              "auth": {
                "enum": [
                  "healthy",
                  "unhealthy"
                ],
                "example": "healthy",
                "type": "string"
              },
              "docker": {
                "enum": [
                  "healthy",
                  "unhealthy"
                ],
                "example": "healthy",
                "type": "string"
              },
              "storage": {
                "enum": [
                  "healthy",
                  "unhealthy"
                ],
                "example": "healthy",
                "type": "string"
              },
              "system": {
                "enum": [
                  "healthy",
                  "unhealthy"
                ],
                "example": "healthy",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "Overall health status",
            "enum": [
              "healthy",
              "degraded",
              "unhealthy"
            ],
            "example": "healthy",
            "type": "string"
          },
          "timestamp": {
            "description": "Health check timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "uptime": {
            "description": "Server uptime in seconds",
            "example": 86400,
            "minimum": 0,
            "type": "integer"
          },
          "version": {
            "description": "UMA version",
            "example": "2025.06.16",
            "type": "string"
          }
        },
        "required": [
          "status",
          "version",
          "uptime",
          "timestamp"
        ],
        "type": "object"
      },
      "LogEntry": {
        "properties": {
          "facility": {
            "description": "Syslog facility",
            "example": "daemon",
            "type": "string"
          },
          "level": {
            "description": "Log level",
            "enum": [
              "debug",
              "info",
              "warn",
              "error",
              "fatal"
            ],
            "example": "info",
            "type": "string"
          },
          "message": {
            "description": "Log message",
            "example": "System startup completed",
            "type": "string"
          },
          "source": {
            "description": "Log source/component",
            "example": "kernel",
            "type": "string"
          },
          "timestamp": {
            "description": "Log entry timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "level",
          "message"
        ],
        "type": "object"
      },
      "LoginRequest": {
        "properties": {
          "client_info": {
            "description": "Optional client information",
            "properties": {
              "ip_address": {
                "description": "Client IP address",
                "example": "192.168.1.100",
                "type": "string"
              },
              "user_agent": {
                "description": "Client user agent",
                "example": "UMA-Client/1.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "password": {
            "description": "Password for authentication",
            "example": "secure_password",
            "format": "password",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "remember_me": {
            "default": false,
            "description": "Whether to create a long-lived session",
            "example": false,
            "type": "boolean"
          },
          "username": {
            "description": "Username for authentication",
            "example": "admin",
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "type": "object"
      },
      "LoginResponse": {
        "properties": {
          "expires_in": {
            "description": "Token expiration time in seconds",
            "example": 3600,
            "minimum": 1,
            "type": "integer"
          },
          "permissions": {
            "description": "User permissions",
            "example": [
              "read",
              "write",
              "admin"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "refresh_token": {
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "string"
          },
          "session_id": {
            "description": "Session identifier",
            "example": "sess_1234567890",
            "type": "string"
          },
          "success": {
            "description": "Whether login was successful",
            "example": true,
            "type": "boolean"
          },
          "token": {
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "string"
          },
          "token_type": {
            "default": "Bearer",
            "description": "Token type",
            "example": "Bearer",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserInfo"
          }
        },
        "required": [
          "success",
          "token",
          "expires_in",
          "token_type",
          "user"
        ],
        "type": "object"
      },
      "MemoryInfo": {
        "properties": {
          "available": {
            "description": "Available memory in bytes",
            "example": 26384523264,
            "minimum": 0,
            "type": "integer"
          },
          "buffers": {
            "description": "Buffer memory in bytes",
            "example": 1073741824,
            "minimum": 0,
            "type": "integer"
          },
          "cached": {
            "description": "Cached memory in bytes",
            "example": 2147483648,
            "minimum": 0,
            "type": "integer"
          },
          "free": {
            "description": "Free memory in bytes",
            "example": 826167296,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "total": {
            "description": "Total memory in bytes",
            "example": 33328439296,
            "minimum": 0,
            "type": "integer"
          },
          "usage": {
            "description": "Memory usage percentage",
            "example": 20.8,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used": {
            "description": "Used memory in bytes",
            "example": 6943916032,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "total",
          "available",
          "used",
          "usage",
          "last_updated"
        ],
        "type": "object"
      },
      "NetworkInfo": {
        "properties": {
          "interfaces": {
            "items": {
              "properties": {
                "ip_address": {
                  "description": "IP address",
                  "example": "192.168.1.100",
                  "type": "string"
                },
                "mac_address": {
                  "description": "MAC address",
                  "example": "00:11:22:33:44:55",
                  "type": "string"
                },
                "name": {
                  "description": "Interface name",
                  "example": "eth0",
                  "type": "string"
                },
                "speed": {
                  "description": "Interface speed",
                  "example": "1000Mbps",
                  "type": "string"
                },
                "status": {
                  "description": "Interface status",
                  "enum": [
                    "up",
                    "down"
                  ],
                  "example": "up",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "interfaces",
          "last_updated"
        ],
        "type": "object"
      },
      "NotificationInfo": {
        "properties": {
          "actions": {
            "description": "Available actions for this notification",
            "items": {
              "properties": {
                "id": {
                  "description": "Action identifier",
                  "example": "acknowledge",
                  "type": "string"
                },
                "label": {
                  "description": "Action display label",
                  "example": "Acknowledge",
                  "type": "string"
                },
                "url": {
                  "description": "Action endpoint URL",
                  "example": "/api/v1/notifications/notif-123/acknowledge",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "label"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "category": {
            "description": "Notification category",
            "enum": [
              "system",
              "storage",
              "docker",
              "vm",
              "network",
              "security"
            ],
            "example": "system",
            "type": "string"
          },
          "created_at": {
            "description": "When the notification was created",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "When the notification expires (null if permanent)",
            "example": "2024-01-02T12:00:00Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique notification identifier",
            "example": "notif-123",
            "type": "string"
          },
          "message": {
            "description": "Notification message content",
            "example": "High CPU usage detected on server",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": true,
            "description": "Additional notification metadata",
            "example": {
              "affected_vms": [
                "vm1",
                "vm2"
              ],
              "cpu_usage": "85%",
              "threshold": "80%"
            },
            "type": "object"
          },
          "read": {
            "description": "Whether the notification has been read",
            "example": false,
            "type": "boolean"
          },
          "read_at": {
            "description": "When the notification was read (null if unread)",
            "example": "2024-01-01T12:05:00Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "severity": {
            "description": "Notification severity level",
            "enum": [
              "info",
              "warning",
              "error",
              "critical"
            ],
            "example": "warning",
            "type": "string"
          },
          "source": {
            "description": "Source component that generated the notification",
            "example": "system_monitor",
            "type": "string"
          },
          "title": {
            "description": "Notification title",
            "example": "System Alert",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "message",
          "severity",
          "category",
          "read",
          "created_at"
        ],
        "type": "object"
      },
      "NotificationList": {
        "description": "List of notifications",
        "example": [
          {
            "id": "notif-123",
            "message": "High CPU usage detected",
            "read": false,
            "severity": "warning",
            "title": "System Alert"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/NotificationInfo"
        },
        "type": "array"
      },
      "NotificationResponse": {
        "properties": {
          "count": {
            "description": "Number of notifications affected (for bulk operations)",
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "message": {
            "description": "Operation result message",
            "example": "Notification created successfully",
            "type": "string"
          },
          "notification": {
            "$ref": "#/components/schemas/NotificationInfo"
          },
          "operation": {
            "description": "Notification operation performed",
            "enum": [
              "create",
              "update",
              "delete",
              "mark_read",
              "clear_all"
            ],
            "example": "create",
            "type": "string"
          },
          "success": {
            "description": "Whether the notification operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "operation"
        ],
        "type": "object"
      },
      "NotificationStats": {
        "properties": {
          "by_severity": {
            "description": "Notification count by severity level",
            "properties": {
              "critical": {
                "description": "Number of critical notifications",
                "example": 2,
                "minimum": 0,
                "type": "integer"
              },
              "error": {
                "description": "Number of error notifications",
                "example": 5,
                "minimum": 0,
                "type": "integer"
              },
              "info": {
                "description": "Number of info notifications",
                "example": 10,
                "minimum": 0,
                "type": "integer"
              },
              "warning": {
                "description": "Number of warning notifications",
                "example": 8,
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "last_updated": {
            "description": "When notifications were last updated",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "persistent": {
            "description": "Number of persistent notifications",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "total": {
            "description": "Total number of notifications",
            "example": 25,
            "minimum": 0,
            "type": "integer"
          },
          "unread": {
            "description": "Number of unread notifications",
            "example": 5,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "total",
          "unread",
          "by_severity",
          "persistent"
        ],
        "type": "object"
      },
      "OpenAPISpec": {
        "description": "Complete OpenAPI 3.0 specification for the UMA API",
        "properties": {
          "components": {
            "properties": {
              "parameters": {
                "additionalProperties": {
                  "description": "Parameter definition",
                  "type": "object"
                },
                "description": "Reusable parameter definitions",
                "type": "object"
              },
              "responses": {
                "additionalProperties": {
                  "description": "Response definition",
                  "type": "object"
                },
                "description": "Reusable response definitions",
                "type": "object"
              },
              "schemas": {
                "additionalProperties": {
                  "description": "Schema definition",
                  "type": "object"
                },
                "description": "Reusable schema definitions",
                "type": "object"
              },
              "securitySchemes": {
                "additionalProperties": {
                  "description": "Security scheme definition",
                  "type": "object"
                },
                "description": "Security scheme definitions",
                "type": "object"
              }
            },
            "type": "object"
          },
          "info": {
            "properties": {
              "description": {
                "description": "API description",
                "example": "Unraid Management API for system monitoring and control",
                "type": "string"
              },
              "title": {
                "description": "API title",
                "example": "UMA API",
                "type": "string"
              },
              "version": {
                "description": "API version",
                "example": "1.0.0",
                "type": "string"
              }
            },
            "required": [
              "title",
              "version"
            ],
            "type": "object"
          },
          "openapi": {
            "description": "OpenAPI specification version",
            "example": "3.0.3",
            "type": "string"
          },
          "paths": {
            "additionalProperties": {
              "description": "Path item with HTTP operations",
              "type": "object"
            },
            "description": "API paths and operations",
            "type": "object"
          },
          "servers": {
            "items": {
              "properties": {
                "description": {
                  "description": "Server description",
                  "example": "UMA API Server",
                  "type": "string"
                },
                "url": {
                  "description": "Server URL",
                  "example": "http://192.168.20.21:34600",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "items": {
              "properties": {
                "description": {
                  "description": "Tag description",
                  "example": "System monitoring and control operations",
                  "type": "string"
                },
                "name": {
                  "description": "Tag name",
                  "example": "System",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "openapi",
          "info",
          "paths"
        ],
        "type": "object"
      },
      "OperationInfo": {
        "properties": {
          "cancellable": {
            "description": "Whether the operation can be cancelled",
            "example": true,
            "type": "boolean"
          },
          "completed": {
            "description": "When the operation completed (null if not finished)",
            "example": "2024-01-01T13:00:00Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_by": {
            "description": "User or system that created the operation",
            "example": "admin",
            "type": "string"
          },
          "description": {
            "description": "Human-readable operation description",
            "example": "Parity check in progress",
            "type": "string"
          },
          "error": {
            "description": "Error message if operation failed",
            "example": "Disk read error",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique operation identifier",
            "example": "op-123",
            "type": "string"
          },
          "progress": {
            "description": "Progress percentage (0-100)",
            "example": 45,
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "result": {
            "additionalProperties": true,
            "description": "Operation result data",
            "example": {
              "duration": 3600,
              "errors_found": 0,
              "sectors_checked": 1000000
            },
            "nullable": true,
            "type": "object"
          },
          "started": {
            "description": "When the operation was started",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Current operation status",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed",
              "cancelled"
            ],
            "example": "running",
            "type": "string"
          },
          "type": {
            "description": "Type of operation",
            "enum": [
              "parity_check",
              "parity_correct",
              "array_start",
              "array_stop",
              "disk_scan",
              "smart_scan",
              "system_reboot",
              "system_shutdown",
              "bulk_container",
              "bulk_vm"
            ],
            "example": "parity_check",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "description",
          "started"
        ],
        "type": "object"
      },
      "OperationList": {
        "description": "List of async operations",
        "example": [
          {
            "description": "Parity check in progress",
            "id": "op-123",
            "progress": 45,
            "status": "running",
            "type": "parity_check"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/OperationInfo"
        },
        "type": "array"
      },
      "OperationStats": {
        "properties": {
          "active": {
            "description": "Number of active operations",
            "example": 3,
            "minimum": 0,
            "type": "integer"
          },
          "average_duration": {
            "description": "Average operation duration",
            "example": "45s",
            "type": "string"
          },
          "by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Operation count by type",
            "example": {
              "array_start": 3,
              "disk_scan": 7,
              "parity_check": 5
            },
            "type": "object"
          },
          "completed": {
            "description": "Number of completed operations",
            "example": 10,
            "minimum": 0,
            "type": "integer"
          },
          "completed_operations": {
            "description": "Number of completed operations",
            "example": 10,
            "minimum": 0,
            "type": "integer"
          },
          "failed": {
            "description": "Number of failed operations",
            "example": 2,
            "minimum": 0,
            "type": "integer"
          },
          "failed_operations": {
            "description": "Number of failed operations",
            "example": 2,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "When statistics were last updated",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "operations_by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Operation count by type (alternative field)",
            "example": {
              "array_start": 2,
              "array_stop": 1,
              "docker_bulk_start": 3,
              "docker_bulk_stop": 2,
              "vm_start": 1,
              "vm_stop": 1
            },
            "type": "object"
          },
          "running_operations": {
            "description": "Number of currently running operations",
            "example": 1,
            "minimum": 0,
            "type": "integer"
          },
          "total": {
            "description": "Total number of operations",
            "example": 15,
            "minimum": 0,
            "type": "integer"
          },
          "total_operations": {
            "description": "Total number of operations (alternative field)",
            "example": 15,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "total",
          "active",
          "completed",
          "failed"
        ],
        "type": "object"
      },
      "PaginationInfo": {
        "properties": {
          "has_more": {
            "description": "Whether there are more pages available",
            "example": true,
            "type": "boolean"
          },
          "page": {
            "description": "Current page number",
            "example": 1,
            "minimum": 1,
            "type": "integer"
          },
          "per_page": {
            "description": "Number of items per page",
            "example": 50,
            "maximum": 1000,
            "minimum": 1,
            "type": "integer"
          },
          "total": {
            "description": "Total number of items",
            "example": 150,
            "minimum": 0,
            "type": "integer"
          },
          "total_pages": {
            "description": "Total number of pages",
            "example": 3,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "page",
          "per_page",
          "total",
          "has_more",
          "total_pages"
        ],
        "type": "object"
      },
      "ParityCheckInfo": {
        "properties": {
          "duration": {
            "description": "Last check duration in seconds",
            "example": 28800,
            "minimum": 0,
            "type": "integer"
          },
          "errors": {
            "description": "Number of errors found",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "eta": {
            "description": "Estimated time to completion in seconds",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "last_check": {
            "description": "Last parity check timestamp",
            "example": "2025-06-01T02:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "progress": {
            "description": "Check progress percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "scheduled": {
            "description": "Next scheduled check",
            "example": "Monthly on 1st at 02:00",
            "type": "string"
          },
          "speed": {
            "description": "Check speed in bytes per second",
            "example": 150000000,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "description": "Parity check status",
            "enum": [
              "idle",
              "running",
              "paused",
              "cancelled"
            ],
            "example": "idle",
            "type": "string"
          }
        },
        "required": [
          "status",
          "progress",
          "errors"
        ],
        "type": "object"
      },
      "ParityCheckResponse": {
        "properties": {
          "check_type": {
            "description": "Type of parity check",
            "enum": [
              "check",
              "correct"
            ],
            "example": "check",
            "type": "string"
          },
          "estimated_duration": {
            "description": "Estimated duration in seconds",
            "example": 28800,
            "minimum": 0,
            "type": "integer"
          },
          "message": {
            "description": "Operation result message",
            "example": "Parity check started successfully",
            "type": "string"
          },
          "operation": {
            "description": "Parity operation performed",
            "enum": [
              "start",
              "stop",
              "pause",
              "resume"
            ],
            "example": "start",
            "type": "string"
          },
          "operation_id": {
            "description": "Async operation ID for tracking",
            "example": "op-parity-123",
            "type": "string"
          },
          "success": {
            "description": "Whether the parity check operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "operation"
        ],
        "type": "object"
      },
      "ParityCheckStatus": {
        "properties": {
          "duration": {
            "description": "Last check duration in seconds",
            "example": 28800,
            "minimum": 0,
            "type": "integer"
          },
          "errors": {
            "description": "Number of errors found",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "eta": {
            "description": "Estimated time to completion in seconds",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "last_check": {
            "description": "Last parity check timestamp",
            "example": "2025-06-01T02:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-20T00:56:56Z",
            "format": "date-time",
            "type": "string"
          },
          "progress": {
            "description": "Check progress percentage",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "speed": {
            "description": "Check speed in bytes per second",
            "example": 150000000,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "description": "Parity check status",
            "enum": [
              "idle",
              "running",
              "paused",
              "cancelled",
              "completed"
            ],
            "example": "idle",
            "type": "string"
          },
          "type": {
            "description": "Type of parity operation",
            "enum": [
              "check",
              "correct"
            ],
            "example": "check",
            "type": "string"
          }
        },
        "required": [
          "status",
          "progress",
          "errors",
          "last_updated"
        ],
        "type": "object"
      },
      "ParityDisk": {
        "properties": {
          "device": {
            "description": "Device path",
            "example": "/dev/sdb",
            "type": "string"
          },
          "health": {
            "description": "Disk health status",
            "enum": [
              "PASSED",
              "FAILED",
              "UNKNOWN"
            ],
            "example": "PASSED",
            "type": "string"
          },
          "name": {
            "description": "Parity disk name",
            "example": "parity",
            "type": "string"
          },
          "serial": {
            "description": "Disk serial number",
            "example": "WD-WCC4N7YYYYYY",
            "type": "string"
          },
          "size": {
            "description": "Disk size (human readable)",
            "example": "8.0 TB",
            "type": "string"
          },
          "smart_data": {
            "additionalProperties": true,
            "description": "SMART data attributes",
            "type": "object"
          },
          "status": {
            "description": "Disk status",
            "enum": [
              "active",
              "standby",
              "spun_down",
              "error",
              "missing"
            ],
            "example": "active",
            "type": "string"
          },
          "temperature": {
            "description": "Disk temperature in Celsius",
            "example": 34,
            "type": "number"
          },
          "type": {
            "description": "Disk type",
            "enum": [
              "parity",
              "parity2"
            ],
            "example": "parity",
            "type": "string"
          }
        },
        "required": [
          "device",
          "name",
          "status",
          "type"
        ],
        "type": "object"
      },
      "ParityDiskInfo": {
        "properties": {
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "parity1": {
            "properties": {
              "device": {
                "description": "Parity disk device path",
                "example": "/dev/sdb",
                "type": "string"
              },
              "model": {
                "description": "Disk model",
                "example": "WDC WD80EFAX-68LHPN0",
                "type": "string"
              },
              "serial": {
                "description": "Disk serial number",
                "example": "WD-WCC4N7XXXXXX",
                "type": "string"
              },
              "size": {
                "description": "Disk size in bytes",
                "example": 8000000000000,
                "minimum": 0,
                "type": "integer"
              },
              "status": {
                "description": "Disk status",
                "enum": [
                  "active",
                  "standby",
                  "spun_down",
                  "error",
                  "missing"
                ],
                "example": "active",
                "type": "string"
              },
              "temperature": {
                "description": "Disk temperature in Celsius",
                "example": 35,
                "type": "number"
              }
            },
            "required": [
              "device",
              "size",
              "status"
            ],
            "type": "object"
          },
          "parity2": {
            "nullable": true,
            "properties": {
              "device": {
                "description": "Parity disk device path",
                "example": "/dev/sdc",
                "type": "string"
              },
              "model": {
                "description": "Disk model",
                "example": "WDC WD80EFAX-68LHPN0",
                "type": "string"
              },
              "serial": {
                "description": "Disk serial number",
                "example": "WD-WCC4N7YYYYYY",
                "type": "string"
              },
              "size": {
                "description": "Disk size in bytes",
                "example": 8000000000000,
                "minimum": 0,
                "type": "integer"
              },
              "status": {
                "description": "Disk status",
                "enum": [
                  "active",
                  "standby",
                  "spun_down",
                  "error",
                  "missing"
                ],
                "example": "active",
                "type": "string"
              },
              "temperature": {
                "description": "Disk temperature in Celsius",
                "example": 36,
                "type": "number"
              }
            },
            "required": [
              "device",
              "size",
              "status"
            ],
            "type": "object"
          }
        },
        "required": [
          "parity1",
          "last_updated"
        ],
        "type": "object"
      },
      "ParityInfo": {
        "properties": {
          "check_status": {
            "$ref": "#/components/schemas/ParityCheckInfo"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "parity1": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiskInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "First parity disk (null if not present)"
          },
          "parity2": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiskInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "Second parity disk (null if not present)"
          }
        },
        "required": [
          "last_updated"
        ],
        "type": "object"
      },
      "PermissionInfo": {
        "properties": {
          "category": {
            "description": "Permission category",
            "enum": [
              "system",
              "docker",
              "storage",
              "vm",
              "auth",
              "monitoring"
            ],
            "example": "docker",
            "type": "string"
          },
          "description": {
            "description": "Permission description",
            "example": "Manage Docker containers (start, stop, restart)",
            "type": "string"
          },
          "level": {
            "description": "Permission level",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "example": "write",
            "type": "string"
          },
          "name": {
            "description": "Permission name",
            "example": "docker.containers.manage",
            "type": "string"
          },
          "resource": {
            "description": "Resource this permission applies to",
            "example": "containers",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "category",
          "level"
        ],
        "type": "object"
      },
      "RateLimitConfig": {
        "additionalProperties": {
          "properties": {
            "requests": {
              "description": "Number of requests allowed",
              "example": 60,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            "window": {
              "description": "Time window for the rate limit (Go duration format)",
              "example": "1m0s",
              "pattern": "^(\\d+(\\.\\d+)?(ns|us|µs|ms|s|m|h))+$",
              "type": "string"
            }
          },
          "required": [
            "requests",
            "window"
          ],
          "type": "object"
        },
        "description": "Rate limiting configuration by operation type",
        "example": {
          "docker_bulk": {
            "requests": 10,
            "window": "1m0s"
          },
          "smart_data": {
            "requests": 2,
            "window": "2m0s"
          }
        },
        "type": "object"
      },
      "RateLimitConfigResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "additionalProperties": {
                  "properties": {
                    "requests": {
                      "description": "Number of requests allowed",
                      "example": 60,
                      "maximum": 1000,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "window": {
                      "description": "Time window for the rate limit (Go duration format)",
                      "example": "1m0s",
                      "pattern": "^(\\d+(\\.\\d+)?(ns|us|µs|ms|s|m|h))+$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "requests",
                    "window"
                  ],
                  "type": "object"
                },
                "description": "Rate limiting configuration by operation type",
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "RateLimitConfigUpdate": {
        "additionalProperties": {
          "properties": {
            "requests": {
              "description": "Number of requests allowed",
              "example": 60,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            "window": {
              "description": "Time window for the rate limit (Go duration format)",
              "example": "1m0s",
              "pattern": "^(\\d+(\\.\\d+)?(ns|us|µs|ms|s|m|h))+$",
              "type": "string"
            }
          },
          "required": [
            "requests",
            "window"
          ],
          "type": "object"
        },
        "description": "Rate limiting configuration updates by operation type",
        "example": {
          "docker_bulk": {
            "requests": 10,
            "window": "1m0s"
          },
          "smart_data": {
            "requests": 2,
            "window": "2m0s"
          }
        },
        "minProperties": 1,
        "type": "object"
      },
      "RateLimitConfigUpdateResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "message": {
                    "example": "Rate limit configuration update not implemented yet",
                    "type": "string"
                  },
                  "note": {
                    "example": "This endpoint would require admin authentication",
                    "type": "string"
                  },
                  "updated_operations": {
                    "description": "List of operation types that were updated",
                    "items": {
                      "enum": [
                        "general",
                        "health_check",
                        "smart_data",
                        "parity_check",
                        "array_control",
                        "disk_info",
                        "docker_list",
                        "docker_control",
                        "docker_bulk",
                        "vm_list",
                        "vm_control",
                        "vm_bulk",
                        "system_info",
                        "system_control",
                        "sensor_data",
                        "async_create",
                        "async_list",
                        "async_cancel"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "RateLimitError": {
        "allOf": [
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "description": "Standardized error code",
                    "enum": [
                      "INVALID_REQUEST",
                      "UNAUTHORIZED",
                      "FORBIDDEN",
                      "NOT_FOUND",
                      "CONFLICT",
                      "INTERNAL_ERROR",
                      "SERVICE_UNAVAILABLE",
                      "RATE_LIMIT_EXCEEDED",
                      "VALIDATION_FAILED",
                      "MISSING_PARAMETER",
                      "INVALID_PARAMETER",
                      "PARAMETER_OUT_OF_RANGE",
                      "ARRAY_NOT_STOPPED",
                      "ARRAY_NOT_STARTED",
                      "ARRAY_INVALID_STATE",
                      "DISK_NOT_FOUND",
                      "DISK_OFFLINE",
                      "DISK_READ_ONLY",
                      "PARITY_CHECK_ACTIVE",
                      "PARITY_CHECK_FAILED",
                      "INSUFFICIENT_SPACE",
                      "CONTAINER_NOT_FOUND",
                      "CONTAINER_NOT_RUNNING",
                      "CONTAINER_NOT_STOPPED",
                      "DOCKER_DAEMON_ERROR",
                      "IMAGE_NOT_FOUND",
                      "NETWORK_NOT_FOUND",
                      "VM_NOT_FOUND",
                      "VM_NOT_RUNNING",
                      "VM_NOT_STOPPED",
                      "VM_CONFIG_ERROR",
                      "VIRT_MANAGER_ERROR",
                      "SYSTEM_NOT_READY",
                      "COMMAND_FAILED",
                      "PERMISSION_DENIED",
                      "RESOURCE_BUSY",
                      "HARDWARE_ERROR",
                      "OPERATION_NOT_FOUND",
                      "OPERATION_NOT_CANCELLABLE",
                      "OPERATION_CONFLICT",
                      "OPERATION_TIMEOUT",
                      "MAX_OPERATIONS_REACHED",
                      "INVALID_CREDENTIALS",
                      "TOKEN_EXPIRED",
                      "TOKEN_INVALID",
                      "SESSION_EXPIRED",
                      "CONFIG_NOT_FOUND",
                      "CONFIG_INVALID",
                      "CONFIG_READ_ONLY"
                    ],
                    "example": "OPERATION_NOT_FOUND",
                    "type": "string"
                  },
                  "details": {
                    "additionalProperties": true,
                    "description": "Additional error context and debugging information",
                    "nullable": true,
                    "properties": {
                      "client_ip": {
                        "description": "Client IP address for rate limiting errors",
                        "type": "string"
                      },
                      "conflicting_operation": {
                        "description": "ID or type of conflicting operation",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Rate limit that was exceeded",
                        "properties": {
                          "requests": {
                            "type": "integer"
                          },
                          "window": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "operation_type": {
                        "description": "Type of operation that failed",
                        "type": "string"
                      },
                      "resource_id": {
                        "description": "ID of the resource that caused the error",
                        "type": "string"
                      },
                      "resource_type": {
                        "description": "Type of resource (disk, container, vm, operation, etc.)",
                        "type": "string"
                      },
                      "validation_errors": {
                        "description": "Detailed validation errors for each field",
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "example": "Operation not found",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "required": [
              "error",
              "meta"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": [
                      "RATE_LIMIT_EXCEEDED"
                    ],
                    "type": "string"
                  },
                  "details": {
                    "properties": {
                      "client_ip": {
                        "description": "The client IP that was rate limited",
                        "type": "string"
                      },
                      "limit": {
                        "properties": {
                          "requests": {
                            "description": "Number of requests allowed",
                            "type": "integer"
                          },
                          "window": {
                            "description": "Time window for the rate limit",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "operation_type": {
                        "description": "The operation type that was rate limited",
                        "type": "string"
                      },
                      "retry_after": {
                        "description": "Seconds to wait before retrying",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "RateLimitStats": {
        "properties": {
          "general_rate_limiter": {
            "description": "General rate limiter statistics",
            "properties": {
              "blocked_requests": {
                "description": "Number of requests blocked by rate limiting",
                "example": 15,
                "minimum": 0,
                "type": "integer"
              },
              "total_requests": {
                "description": "Total number of requests processed",
                "example": 1250,
                "minimum": 0,
                "type": "integer"
              },
              "type": {
                "example": "general",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-20T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "operation_rate_limiter": {
            "properties": {
              "client_stats": {
                "additionalProperties": {
                  "additionalProperties": {
                    "properties": {
                      "last_request": {
                        "description": "Timestamp of last request",
                        "example": "2025-06-20T14:30:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "max_tokens": {
                        "description": "Maximum number of tokens for this operation type",
                        "example": 60,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "requests_made": {
                        "description": "Number of requests made in current window",
                        "example": 15,
                        "minimum": 0,
                        "type": "integer"
                      },
                      "tokens_remaining": {
                        "description": "Number of tokens remaining for this client",
                        "example": 45,
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                },
                "description": "Per-client rate limiting statistics",
                "type": "object"
              },
              "operation_limits": {
                "additionalProperties": {
                  "properties": {
                    "requests": {
                      "description": "Number of requests allowed",
                      "example": 60,
                      "type": "integer"
                    },
                    "window": {
                      "description": "Time window for the rate limit",
                      "example": "1m0s",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "Current rate limits by operation type",
                "type": "object"
              },
              "total_clients": {
                "description": "Total number of tracked clients",
                "example": 5,
                "minimum": 0,
                "type": "integer"
              },
              "type": {
                "example": "operation_specific",
                "type": "string"
              }
            },
            "type": "object"
          },
          "time_range": {
            "description": "Time range for these statistics",
            "example": "24h",
            "type": "string"
          }
        },
        "required": [
          "general_rate_limiter",
          "operation_rate_limiter",
          "last_updated"
        ],
        "type": "object"
      },
      "RateLimitStatsResponse": {
        "allOf": [
          {
            "properties": {
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "general_rate_limiter": {
                    "description": "General rate limiter statistics",
                    "properties": {
                      "type": {
                        "example": "general",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "operation_rate_limiter": {
                    "properties": {
                      "client_stats": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "properties": {
                              "max_tokens": {
                                "description": "Maximum number of tokens for this operation type",
                                "minimum": 1,
                                "type": "integer"
                              },
                              "tokens_remaining": {
                                "description": "Number of tokens remaining for this client",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "description": "Per-client rate limiting statistics",
                        "type": "object"
                      },
                      "operation_limits": {
                        "additionalProperties": {
                          "properties": {
                            "requests": {
                              "description": "Number of requests allowed",
                              "type": "integer"
                            },
                            "window": {
                              "description": "Time window for the rate limit",
                              "example": "1m0s",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "description": "Current rate limits by operation type",
                        "type": "object"
                      },
                      "total_clients": {
                        "description": "Total number of tracked clients",
                        "type": "integer"
                      },
                      "type": {
                        "example": "operation_specific",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "RefreshRequest": {
        "properties": {
          "refresh_token": {
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "string"
          }
        },
        "required": [
          "refresh_token"
        ],
        "type": "object"
      },
      "ResourceNotFoundError": {
        "allOf": [
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "description": "Standardized error code",
                    "enum": [
                      "INVALID_REQUEST",
                      "UNAUTHORIZED",
                      "FORBIDDEN",
                      "NOT_FOUND",
                      "CONFLICT",
                      "INTERNAL_ERROR",
                      "SERVICE_UNAVAILABLE",
                      "RATE_LIMIT_EXCEEDED",
                      "VALIDATION_FAILED",
                      "MISSING_PARAMETER",
                      "INVALID_PARAMETER",
                      "PARAMETER_OUT_OF_RANGE",
                      "ARRAY_NOT_STOPPED",
                      "ARRAY_NOT_STARTED",
                      "ARRAY_INVALID_STATE",
                      "DISK_NOT_FOUND",
                      "DISK_OFFLINE",
                      "DISK_READ_ONLY",
                      "PARITY_CHECK_ACTIVE",
                      "PARITY_CHECK_FAILED",
                      "INSUFFICIENT_SPACE",
                      "CONTAINER_NOT_FOUND",
                      "CONTAINER_NOT_RUNNING",
                      "CONTAINER_NOT_STOPPED",
                      "DOCKER_DAEMON_ERROR",
                      "IMAGE_NOT_FOUND",
                      "NETWORK_NOT_FOUND",
                      "VM_NOT_FOUND",
                      "VM_NOT_RUNNING",
                      "VM_NOT_STOPPED",
                      "VM_CONFIG_ERROR",
                      "VIRT_MANAGER_ERROR",
                      "SYSTEM_NOT_READY",
                      "COMMAND_FAILED",
                      "PERMISSION_DENIED",
                      "RESOURCE_BUSY",
                      "HARDWARE_ERROR",
                      "OPERATION_NOT_FOUND",
                      "OPERATION_NOT_CANCELLABLE",
                      "OPERATION_CONFLICT",
                      "OPERATION_TIMEOUT",
                      "MAX_OPERATIONS_REACHED",
                      "INVALID_CREDENTIALS",
                      "TOKEN_EXPIRED",
                      "TOKEN_INVALID",
                      "SESSION_EXPIRED",
                      "CONFIG_NOT_FOUND",
                      "CONFIG_INVALID",
                      "CONFIG_READ_ONLY"
                    ],
                    "example": "OPERATION_NOT_FOUND",
                    "type": "string"
                  },
                  "details": {
                    "additionalProperties": true,
                    "description": "Additional error context and debugging information",
                    "nullable": true,
                    "properties": {
                      "client_ip": {
                        "description": "Client IP address for rate limiting errors",
                        "type": "string"
                      },
                      "conflicting_operation": {
                        "description": "ID or type of conflicting operation",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Rate limit that was exceeded",
                        "properties": {
                          "requests": {
                            "type": "integer"
                          },
                          "window": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "operation_type": {
                        "description": "Type of operation that failed",
                        "type": "string"
                      },
                      "resource_id": {
                        "description": "ID of the resource that caused the error",
                        "type": "string"
                      },
                      "resource_type": {
                        "description": "Type of resource (disk, container, vm, operation, etc.)",
                        "type": "string"
                      },
                      "validation_errors": {
                        "description": "Detailed validation errors for each field",
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "example": "Operation not found",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "required": [
              "error",
              "meta"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": [
                      "DISK_NOT_FOUND",
                      "CONTAINER_NOT_FOUND",
                      "VM_NOT_FOUND",
                      "OPERATION_NOT_FOUND"
                    ],
                    "type": "string"
                  },
                  "details": {
                    "properties": {
                      "resource_id": {
                        "description": "ID of the resource that was not found",
                        "type": "string"
                      },
                      "resource_type": {
                        "description": "Type of resource (disk, container, vm, operation)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "ResponseMeta": {
        "properties": {
          "request_id": {
            "description": "Unique request identifier for tracing",
            "example": "req_1234567890_5678",
            "type": "string"
          },
          "server": {
            "description": "Server identifier",
            "example": "uma-server-01",
            "type": "string"
          },
          "timestamp": {
            "description": "Response timestamp in ISO 8601 format",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "description": "API version",
            "example": "v1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SMARTData": {
        "properties": {
          "last_test_result": {
            "description": "Last self-test result",
            "example": "Completed without error",
            "type": "string"
          },
          "last_updated": {
            "description": "Last SMART data update",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "overall_health": {
            "description": "Overall SMART health status",
            "enum": [
              "PASSED",
              "FAILED",
              "UNKNOWN"
            ],
            "example": "PASSED",
            "type": "string"
          },
          "pending_sectors": {
            "description": "Current pending sector count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "power_cycle_count": {
            "description": "Power cycle count",
            "example": 100,
            "minimum": 0,
            "type": "integer"
          },
          "power_on_hours": {
            "description": "Total power-on hours",
            "example": 8760,
            "minimum": 0,
            "type": "integer"
          },
          "reallocated_sectors": {
            "description": "Reallocated sector count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "temperature": {
            "description": "Current temperature in Celsius",
            "example": 35,
            "type": "number"
          },
          "uncorrectable_errors": {
            "description": "Offline uncorrectable error count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "overall_health",
          "last_updated"
        ],
        "type": "object"
      },
      "ScriptCreate": {
        "properties": {
          "category": {
            "description": "Script category",
            "enum": [
              "user",
              "system",
              "maintenance",
              "backup",
              "monitoring"
            ],
            "example": "maintenance",
            "type": "string"
          },
          "content": {
            "description": "Script content (for text-based creation)",
            "example": "#!/bin/bash\necho \"Hello World\"",
            "type": "string"
          },
          "description": {
            "description": "Script description",
            "example": "Custom script for system maintenance",
            "maxLength": 500,
            "type": "string"
          },
          "enabled": {
            "default": true,
            "description": "Whether script should be enabled",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Script name",
            "example": "My Custom Script",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "schedule": {
            "description": "Cron schedule expression (optional)",
            "example": "0 2 * * *",
            "type": "string"
          },
          "timeout": {
            "default": 3600,
            "description": "Script timeout in seconds",
            "example": 3600,
            "maximum": 86400,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ScriptInfo": {
        "properties": {
          "category": {
            "description": "Script category",
            "enum": [
              "user",
              "system",
              "maintenance",
              "backup",
              "monitoring"
            ],
            "example": "backup",
            "type": "string"
          },
          "created_at": {
            "description": "Script creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Script description",
            "example": "Performs daily backup of user data",
            "type": "string"
          },
          "enabled": {
            "description": "Whether script is enabled",
            "example": true,
            "type": "boolean"
          },
          "executable": {
            "description": "Whether script file is executable",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "Unique script identifier",
            "example": "backup-script-001",
            "type": "string"
          },
          "last_run": {
            "description": "Last execution timestamp",
            "example": "2025-06-20T02:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "modified_at": {
            "description": "Script last modification timestamp",
            "example": "2025-06-20T10:15:00Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Script name",
            "example": "Daily Backup Script",
            "type": "string"
          },
          "path": {
            "description": "Full path to script file",
            "example": "/boot/config/plugins/user.scripts/scripts/backup-script-001/script",
            "type": "string"
          },
          "permissions": {
            "description": "File permissions in octal format",
            "example": "755",
            "type": "string"
          },
          "run_count": {
            "description": "Number of times script has been executed",
            "example": 42,
            "minimum": 0,
            "type": "integer"
          },
          "schedule": {
            "description": "Cron schedule expression (if scheduled)",
            "example": "0 2 * * *",
            "type": "string"
          },
          "size": {
            "description": "Script file size in bytes",
            "example": 2048,
            "minimum": 0,
            "type": "integer"
          },
          "timeout": {
            "description": "Script timeout in seconds",
            "example": 3600,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "path",
          "enabled",
          "executable"
        ],
        "type": "object"
      },
      "SensorChip": {
        "properties": {
          "name": {
            "description": "Sensor chip name",
            "example": "coretemp-isa-0000",
            "type": "string"
          },
          "temperatures": {
            "additionalProperties": {
              "$ref": "#/components/schemas/TemperatureInput"
            },
            "description": "Temperature inputs",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SessionInfo": {
        "properties": {
          "active": {
            "description": "Whether session is active",
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "description": "Session creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "Session expiration timestamp",
            "example": "2025-06-16T18:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Session ID",
            "example": "sess_1234567890",
            "type": "string"
          },
          "ip_address": {
            "description": "Client IP address",
            "example": "192.168.1.100",
            "type": "string"
          },
          "last_activity": {
            "description": "Last activity timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "user_agent": {
            "description": "Client user agent",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
            "type": "string"
          },
          "user_id": {
            "description": "User ID",
            "example": "user_1234567890",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user_id",
          "username",
          "created_at",
          "expires_at",
          "active"
        ],
        "type": "object"
      },
      "ShareCreate": {
        "properties": {
          "browseable": {
            "default": true,
            "description": "Make share browseable",
            "example": true,
            "type": "boolean"
          },
          "comment": {
            "description": "Share description",
            "example": "Document storage and collaboration",
            "maxLength": 200,
            "type": "string"
          },
          "enabled": {
            "default": true,
            "description": "Enable share immediately",
            "example": true,
            "type": "boolean"
          },
          "groups": {
            "description": "Groups with access to this share",
            "example": [
              "users"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Share name",
            "example": "documents",
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "path": {
            "description": "Local path to share",
            "example": "/mnt/user/documents",
            "minLength": 1,
            "type": "string"
          },
          "protocol": {
            "description": "Sharing protocol",
            "enum": [
              "smb",
              "nfs",
              "afp",
              "ftp"
            ],
            "example": "smb",
            "type": "string"
          },
          "public": {
            "default": false,
            "description": "Allow guest access",
            "example": false,
            "type": "boolean"
          },
          "read_only": {
            "default": false,
            "description": "Make share read-only",
            "example": false,
            "type": "boolean"
          },
          "users": {
            "description": "Users with access to this share",
            "example": [
              "admin",
              "user1"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "path",
          "protocol"
        ],
        "type": "object"
      },
      "ShareInfo": {
        "properties": {
          "active_connections": {
            "description": "Number of active connections",
            "example": 3,
            "minimum": 0,
            "type": "integer"
          },
          "available": {
            "description": "Available space in bytes",
            "example": 536870912000,
            "minimum": 0,
            "type": "integer"
          },
          "browseable": {
            "description": "Whether share is browseable",
            "example": true,
            "type": "boolean"
          },
          "comment": {
            "description": "Share description/comment",
            "example": "Media files and entertainment content",
            "type": "string"
          },
          "created_at": {
            "description": "Share creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "enabled": {
            "description": "Whether share is enabled",
            "example": true,
            "type": "boolean"
          },
          "groups": {
            "description": "List of groups with access",
            "example": [
              "users",
              "media"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "modified_at": {
            "description": "Share last modification timestamp",
            "example": "2025-06-20T10:15:00Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Share name",
            "example": "media",
            "type": "string"
          },
          "path": {
            "description": "Local path being shared",
            "example": "/mnt/user/media",
            "type": "string"
          },
          "protocol": {
            "description": "Sharing protocol",
            "enum": [
              "smb",
              "nfs",
              "afp",
              "ftp"
            ],
            "example": "smb",
            "type": "string"
          },
          "public": {
            "description": "Whether share allows guest access",
            "example": false,
            "type": "boolean"
          },
          "read_only": {
            "description": "Whether share is read-only",
            "example": false,
            "type": "boolean"
          },
          "size": {
            "description": "Total size of shared directory in bytes",
            "example": 1073741824000,
            "minimum": 0,
            "type": "integer"
          },
          "usage_percent": {
            "description": "Usage percentage",
            "example": 50,
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "used": {
            "description": "Used space in bytes",
            "example": 536870912000,
            "minimum": 0,
            "type": "integer"
          },
          "users": {
            "description": "List of users with access",
            "example": [
              "admin",
              "user1",
              "media"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "path",
          "protocol",
          "enabled"
        ],
        "type": "object"
      },
      "StandardResponse": {
        "properties": {
          "data": {
            "description": "The response data"
          },
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationInfo"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "StorageGeneral": {
        "properties": {
          "array_status": {
            "description": "Array status",
            "enum": [
              "started",
              "stopped",
              "starting",
              "stopping",
              "unknown"
            ],
            "example": "started",
            "type": "string"
          },
          "boot_usage": {
            "description": "Boot device usage information",
            "properties": {
              "available": {
                "description": "Available boot space",
                "example": "29.9GB",
                "type": "string"
              },
              "device": {
                "description": "Boot device path",
                "example": "/dev/sda1",
                "type": "string"
              },
              "filesystem": {
                "description": "Boot filesystem type",
                "example": "vfat",
                "type": "string"
              },
              "last_updated": {
                "description": "Last update timestamp",
                "example": "2025-06-20T00:56:59Z",
                "format": "date-time",
                "type": "string"
              },
              "size": {
                "description": "Boot device size",
                "example": "32GB",
                "type": "string"
              },
              "usage": {
                "description": "Boot usage percentage",
                "example": 6.6,
                "maximum": 100,
                "minimum": 0,
                "type": "number"
              },
              "used": {
                "description": "Used boot space",
                "example": "2.1GB",
                "type": "string"
              }
            },
            "required": [
              "device",
              "filesystem",
              "size",
              "used",
              "available",
              "usage",
              "last_updated"
            ],
            "type": "object"
          },
          "disk_count": {
            "description": "Total number of disks",
            "example": 8,
            "minimum": 0,
            "type": "integer"
          },
          "docker_vdisk": {
            "description": "Docker virtual disk usage information",
            "properties": {
              "free": {
                "description": "Free docker vdisk space in bytes",
                "example": 148755898368,
                "minimum": 0,
                "type": "number"
              },
              "last_updated": {
                "description": "Last update timestamp",
                "example": "2025-06-20T00:56:59Z",
                "format": "date-time",
                "type": "string"
              },
              "path": {
                "description": "Docker vdisk path",
                "example": "/var/lib/docker",
                "type": "string"
              },
              "total": {
                "description": "Total docker vdisk space in bytes",
                "example": 161061273600,
                "minimum": 0,
                "type": "number"
              },
              "usage": {
                "description": "Docker vdisk usage percentage",
                "example": 7.64,
                "maximum": 100,
                "minimum": 0,
                "type": "number"
              },
              "used": {
                "description": "Used docker vdisk space in bytes",
                "example": 12305375232,
                "minimum": 0,
                "type": "number"
              }
            },
            "required": [
              "path",
              "total",
              "used",
              "free",
              "usage",
              "last_updated"
            ],
            "type": "object"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "log_usage": {
            "description": "Log directory usage information",
            "properties": {
              "free": {
                "description": "Free log space in bytes",
                "example": 129445888,
                "minimum": 0,
                "type": "number"
              },
              "last_updated": {
                "description": "Last update timestamp",
                "example": "2025-06-20T00:56:59Z",
                "format": "date-time",
                "type": "string"
              },
              "path": {
                "description": "Log directory path",
                "example": "/var/log",
                "type": "string"
              },
              "total": {
                "description": "Total log space in bytes",
                "example": 134217728,
                "minimum": 0,
                "type": "number"
              },
              "usage": {
                "description": "Log usage percentage",
                "example": 3.56,
                "maximum": 100,
                "minimum": 0,
                "type": "number"
              },
              "used": {
                "description": "Used log space in bytes",
                "example": 4771840,
                "minimum": 0,
                "type": "number"
              }
            },
            "required": [
              "path",
              "total",
              "used",
              "free",
              "usage",
              "last_updated"
            ],
            "type": "object"
          },
          "parity_valid": {
            "description": "Whether parity is valid",
            "example": true,
            "type": "boolean"
          },
          "total_capacity": {
            "description": "Total storage capacity in bytes",
            "example": 50000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_free": {
            "description": "Total free storage in bytes",
            "example": 25000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_used": {
            "description": "Total used storage in bytes",
            "example": 25000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "usage_percent": {
            "description": "Overall usage percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "total_capacity",
          "total_used",
          "total_free",
          "usage_percent",
          "disk_count",
          "array_status",
          "log_usage",
          "boot_usage",
          "docker_vdisk",
          "last_updated"
        ],
        "type": "object"
      },
      "StorageOverview": {
        "properties": {
          "array": {
            "$ref": "#/components/schemas/ArrayInfo"
          },
          "cache": {
            "$ref": "#/components/schemas/CacheInfo"
          },
          "disks": {
            "description": "All disks in the system",
            "items": {
              "$ref": "#/components/schemas/DiskInfo"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "overall_usage_percent": {
            "description": "Overall storage usage percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "parity": {
            "$ref": "#/components/schemas/ParityInfo"
          },
          "total_capacity": {
            "description": "Total storage capacity in bytes",
            "example": 50000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_free": {
            "description": "Total free storage in bytes",
            "example": 25000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_used": {
            "description": "Total used storage in bytes",
            "example": 25000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "zfs_pools": {
            "description": "ZFS pools (if available)",
            "items": {
              "$ref": "#/components/schemas/ZFSPoolInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "array",
          "disks",
          "total_capacity",
          "total_used",
          "total_free",
          "last_updated"
        ],
        "type": "object"
      },
      "SuccessResponse": {
        "properties": {
          "data": {
            "description": "Optional response data"
          },
          "message": {
            "description": "Success message",
            "example": "Operation completed successfully",
            "type": "string"
          },
          "success": {
            "description": "Operation success status",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ],
        "type": "object"
      },
      "SystemInfo": {
        "properties": {
          "architecture": {
            "description": "System architecture",
            "example": "x86_64",
            "type": "string"
          },
          "hostname": {
            "description": "System hostname",
            "example": "unraid-server",
            "type": "string"
          },
          "kernel": {
            "description": "Kernel version",
            "example": "5.19.17-Unraid",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "load_average": {
            "description": "Load average (1, 5, 15 minutes)",
            "example": [
              0.5,
              0.7,
              0.8
            ],
            "items": {
              "type": "number"
            },
            "maxItems": 3,
            "minItems": 3,
            "type": "array"
          },
          "uptime": {
            "description": "System uptime in seconds",
            "example": 86400,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "hostname",
          "kernel",
          "uptime",
          "load_average"
        ],
        "type": "object"
      },
      "SystemLogs": {
        "properties": {
          "filtered_count": {
            "description": "Number of filtered log entries",
            "example": 50,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "log_sources": {
            "description": "Available log sources",
            "example": [
              "kernel",
              "syslog",
              "auth",
              "daemon"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logs": {
            "description": "System log entries",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "type": "array"
          },
          "total_count": {
            "description": "Total number of log entries",
            "example": 1000,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "logs",
          "total_count",
          "last_updated"
        ],
        "type": "object"
      },
      "SystemLogsAll": {
        "properties": {
          "filters_applied": {
            "properties": {
              "level": {
                "description": "Log level filter applied",
                "example": "info",
                "type": "string"
              },
              "lines": {
                "description": "Number of lines requested",
                "example": 1000,
                "type": "integer"
              },
              "since": {
                "description": "Since timestamp filter",
                "example": "2025-06-20T12:00:00Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-20T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "logs": {
            "description": "Array of log entries from all system sources",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "type": "array"
          },
          "sources": {
            "description": "List of log sources included",
            "example": [
              "syslog",
              "kernel",
              "auth",
              "daemon"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "time_range": {
            "properties": {
              "end": {
                "description": "End time of log range",
                "example": "2025-06-20T23:59:59Z",
                "format": "date-time",
                "type": "string"
              },
              "start": {
                "description": "Start time of log range",
                "example": "2025-06-20T00:00:00Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "type": "object"
          },
          "total_entries": {
            "description": "Total number of log entries",
            "example": 1500,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "logs",
          "sources",
          "total_entries",
          "last_updated"
        ],
        "type": "object"
      },
      "SystemOperationResponse": {
        "properties": {
          "delay_seconds": {
            "description": "Delay before operation executes",
            "example": 60,
            "minimum": 0,
            "type": "integer"
          },
          "message": {
            "description": "Operation result message",
            "example": "System reboot initiated successfully",
            "type": "string"
          },
          "operation": {
            "description": "System operation performed",
            "enum": [
              "reboot",
              "shutdown",
              "restart_service",
              "stop_service"
            ],
            "example": "reboot",
            "type": "string"
          },
          "operation_id": {
            "description": "Async operation ID for tracking",
            "example": "op-reboot-456",
            "type": "string"
          },
          "scheduled_time": {
            "description": "When the operation is scheduled to execute",
            "example": "2024-01-01T12:05:00Z",
            "format": "date-time",
            "type": "string"
          },
          "success": {
            "description": "Whether the system operation was successful",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "operation"
        ],
        "type": "object"
      },
      "SystemResources": {
        "properties": {
          "cpu": {
            "$ref": "#/components/schemas/CPUInfo"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "load": {
            "description": "System load averages",
            "properties": {
              "load1": {
                "description": "1-minute load average",
                "example": 0.51,
                "minimum": 0,
                "type": "number"
              },
              "load15": {
                "description": "15-minute load average",
                "example": 0.59,
                "minimum": 0,
                "type": "number"
              },
              "load5": {
                "description": "5-minute load average",
                "example": 0.54,
                "minimum": 0,
                "type": "number"
              }
            },
            "required": [
              "load1",
              "load5",
              "load15"
            ],
            "type": "object"
          },
          "load_average": {
            "description": "Load average (1, 5, 15 minutes)",
            "example": [
              0.5,
              0.7,
              0.8
            ],
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "memory": {
            "$ref": "#/components/schemas/MemoryInfo"
          },
          "network": {
            "description": "Network interface information",
            "properties": {
              "interfaces": {
                "items": {
                  "properties": {
                    "ip_address": {
                      "description": "IP address",
                      "example": "192.168.20.21",
                      "type": "string"
                    },
                    "name": {
                      "description": "Interface name",
                      "example": "eth0",
                      "type": "string"
                    },
                    "rx_bytes": {
                      "description": "Received bytes",
                      "example": 1820920544100,
                      "minimum": 0,
                      "type": "number"
                    },
                    "status": {
                      "description": "Interface status",
                      "enum": [
                        "up",
                        "down"
                      ],
                      "example": "up",
                      "type": "string"
                    },
                    "tx_bytes": {
                      "description": "Transmitted bytes",
                      "example": 1199805033,
                      "minimum": 0,
                      "type": "number"
                    }
                  },
                  "required": [
                    "name",
                    "status",
                    "rx_bytes",
                    "tx_bytes"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "interfaces"
            ],
            "type": "object"
          },
          "processes": {
            "description": "Number of running processes",
            "example": 150,
            "minimum": 0,
            "type": "integer"
          },
          "uptime": {
            "description": "System uptime information",
            "properties": {
              "days": {
                "description": "Days component",
                "example": 3,
                "minimum": 0,
                "type": "number"
              },
              "hours": {
                "description": "Hours component",
                "example": 20,
                "minimum": 0,
                "type": "number"
              },
              "minutes": {
                "description": "Minutes component",
                "example": 14,
                "minimum": 0,
                "type": "number"
              },
              "seconds": {
                "description": "Seconds component",
                "example": 31,
                "minimum": 0,
                "type": "number"
              },
              "uptime": {
                "description": "Human readable uptime",
                "example": "3d 20h 14m 31s",
                "type": "string"
              },
              "uptime_seconds": {
                "description": "Uptime in seconds",
                "example": 332071,
                "minimum": 0,
                "type": "number"
              }
            },
            "required": [
              "uptime",
              "uptime_seconds"
            ],
            "type": "object"
          }
        },
        "required": [
          "cpu",
          "memory",
          "network",
          "uptime",
          "load",
          "last_updated"
        ],
        "type": "object"
      },
      "SystemScript": {
        "properties": {
          "description": {
            "description": "Script description",
            "example": "Daily backup script",
            "type": "string"
          },
          "executable": {
            "description": "Whether the script is executable",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Script name",
            "example": "backup_script",
            "type": "string"
          },
          "path": {
            "description": "Script file path",
            "example": "/boot/config/plugins/user.scripts/scripts/backup_script/script",
            "type": "string"
          }
        },
        "required": [
          "name",
          "path"
        ],
        "type": "object"
      },
      "TemperatureData": {
        "properties": {
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "sensors": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SensorChip"
            },
            "description": "Temperature sensors by chip",
            "type": "object"
          }
        },
        "required": [
          "sensors",
          "last_updated"
        ],
        "type": "object"
      },
      "TemperatureInfo": {
        "properties": {
          "fans": {
            "description": "Fan monitoring data",
            "items": {
              "properties": {
                "name": {
                  "description": "Fan name",
                  "example": "nct6793 - fan1",
                  "type": "string"
                },
                "source": {
                  "description": "Fan source chip",
                  "example": "nct6793",
                  "type": "string"
                },
                "speed": {
                  "description": "Fan speed in RPM",
                  "example": 790,
                  "minimum": 0,
                  "type": "number"
                },
                "status": {
                  "description": "Fan status",
                  "enum": [
                    "normal",
                    "warning",
                    "critical"
                  ],
                  "example": "normal",
                  "type": "string"
                },
                "unit": {
                  "description": "Speed unit",
                  "example": "RPM",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "speed",
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "max_temperature": {
            "description": "Highest temperature reading",
            "example": 45,
            "type": "number"
          },
          "overall_status": {
            "description": "Overall temperature status",
            "enum": [
              "normal",
              "warm",
              "hot",
              "critical"
            ],
            "example": "normal",
            "type": "string"
          },
          "sensors": {
            "items": {
              "properties": {
                "chip": {
                  "description": "Sensor chip identifier",
                  "example": "coretemp-isa-0000",
                  "type": "string"
                },
                "critical": {
                  "description": "Critical temperature threshold",
                  "example": 100,
                  "type": "number"
                },
                "current": {
                  "description": "Current temperature in Celsius",
                  "example": 45,
                  "type": "number"
                },
                "high": {
                  "description": "High temperature threshold",
                  "example": 80,
                  "type": "number"
                },
                "name": {
                  "description": "Temperature sensor name",
                  "example": "CPU Core 0",
                  "type": "string"
                },
                "status": {
                  "description": "Temperature status",
                  "enum": [
                    "normal",
                    "warm",
                    "hot",
                    "critical"
                  ],
                  "example": "normal",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "current",
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "sensors",
          "fans",
          "overall_status",
          "last_updated"
        ],
        "type": "object"
      },
      "TemperatureInput": {
        "properties": {
          "critical": {
            "description": "Critical temperature threshold",
            "example": 105,
            "type": "number"
          },
          "current": {
            "description": "Current temperature in Celsius",
            "example": 45,
            "type": "number"
          },
          "high": {
            "description": "High temperature threshold",
            "example": 100,
            "type": "number"
          },
          "label": {
            "description": "Temperature sensor label",
            "example": "Core 0",
            "type": "string"
          }
        },
        "required": [
          "label",
          "current"
        ],
        "type": "object"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "string"
          },
          "expires_in": {
            "description": "Token expiration time in seconds",
            "example": 3600,
            "minimum": 1,
            "type": "integer"
          },
          "issued_at": {
            "description": "Token issuance timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "refresh_token": {
            "description": "JWT refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "string"
          },
          "scope": {
            "description": "Token scope",
            "example": "read write admin",
            "type": "string"
          },
          "token_type": {
            "default": "Bearer",
            "description": "Token type",
            "example": "Bearer",
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "type": "object"
      },
      "UPSInfo": {
        "properties": {
          "available": {
            "description": "Whether UPS is available",
            "example": true,
            "type": "boolean"
          },
          "battery_charge": {
            "description": "Battery charge percentage",
            "example": 95,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "battery_runtime": {
            "description": "Estimated battery runtime in minutes",
            "example": 45,
            "minimum": 0,
            "type": "integer"
          },
          "detection": {
            "description": "UPS detection information",
            "properties": {
              "available": {
                "description": "Whether UPS detection is available",
                "example": true,
                "type": "boolean"
              },
              "last_check": {
                "description": "Last detection check timestamp",
                "example": "2025-06-20T10:56:38Z",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Detection type",
                "example": 1,
                "type": "number"
              }
            },
            "required": [
              "available",
              "last_check",
              "type"
            ],
            "type": "object"
          },
          "input_voltage": {
            "description": "Input voltage",
            "example": 230,
            "type": "number"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "load": {
            "description": "UPS load",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "load_percent": {
            "description": "UPS load percentage",
            "example": 25.5,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "model": {
            "description": "UPS model",
            "example": "APC Smart-UPS 1500",
            "type": "string"
          },
          "output_voltage": {
            "description": "Output voltage",
            "example": 230,
            "type": "number"
          },
          "runtime": {
            "description": "UPS runtime",
            "example": 220,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "description": "UPS status",
            "enum": [
              "online",
              "onbatt",
              "lowbatt",
              "unknown"
            ],
            "example": "online",
            "type": "string"
          },
          "voltage": {
            "description": "UPS voltage",
            "example": 240,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "status",
          "available",
          "detection",
          "voltage",
          "load",
          "runtime",
          "last_updated"
        ],
        "type": "object"
      },
      "UnifiedWebSocketStream": {
        "description": "Unified WebSocket stream supporting multiple event types with subscription management",
        "properties": {
          "channel": {
            "description": "Event channel for subscription management",
            "example": "system.stats",
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "Event data (varies by type)",
            "example": {
              "cpu_percent": 25.5,
              "memory_percent": 50,
              "timestamp": "2025-06-19T14:30:00Z"
            },
            "type": "object"
          },
          "subscription_id": {
            "description": "Subscription ID for tracking",
            "example": "sub_1234567890",
            "type": "string"
          },
          "timestamp": {
            "description": "Event timestamp",
            "example": "2025-06-19T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "system.stats",
              "docker.events",
              "storage.status",
              "temperature.alert",
              "resource.alert",
              "infrastructure.status"
            ],
            "example": "system.stats",
            "type": "string"
          }
        },
        "required": [
          "type",
          "channel",
          "data",
          "timestamp"
        ],
        "type": "object"
      },
      "UserInfo": {
        "properties": {
          "active": {
            "description": "Whether user account is active",
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "description": "User creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "User email address",
            "example": "admin@example.com",
            "format": "email",
            "type": "string"
          },
          "full_name": {
            "description": "User full name",
            "example": "System Administrator",
            "type": "string"
          },
          "id": {
            "description": "User ID",
            "example": "user_1234567890",
            "type": "string"
          },
          "last_login": {
            "description": "Last login timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "permissions": {
            "description": "User permissions",
            "example": [
              "read",
              "write",
              "admin"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "description": "User role",
            "enum": [
              "admin",
              "user",
              "readonly"
            ],
            "example": "admin",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "role",
          "permissions",
          "active"
        ],
        "type": "object"
      },
      "VMConfig": {
        "properties": {
          "autostart": {
            "description": "Whether VM starts automatically",
            "example": true,
            "type": "boolean"
          },
          "description": {
            "description": "VM description",
            "example": "Windows 10 gaming virtual machine",
            "type": "string"
          },
          "disks": {
            "items": {
              "$ref": "#/components/schemas/VMDisk"
            },
            "type": "array"
          },
          "name": {
            "description": "VM name",
            "example": "Windows-10-Gaming",
            "type": "string"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/VMNetwork"
            },
            "type": "array"
          },
          "os_type": {
            "description": "Operating system type",
            "enum": [
              "windows",
              "linux",
              "macos",
              "other"
            ],
            "example": "windows",
            "type": "string"
          },
          "resources": {
            "$ref": "#/components/schemas/VMResources"
          }
        },
        "required": [
          "name",
          "os_type",
          "resources"
        ],
        "type": "object"
      },
      "VMDisk": {
        "properties": {
          "bootable": {
            "description": "Whether disk is bootable",
            "example": true,
            "type": "boolean"
          },
          "bus": {
            "description": "Disk bus type",
            "enum": [
              "virtio",
              "sata",
              "ide",
              "scsi"
            ],
            "example": "virtio",
            "type": "string"
          },
          "device": {
            "description": "Disk device name",
            "example": "vda",
            "type": "string"
          },
          "format": {
            "description": "Disk format",
            "enum": [
              "raw",
              "qcow2",
              "vmdk",
              "vdi"
            ],
            "example": "raw",
            "type": "string"
          },
          "readonly": {
            "description": "Whether disk is read-only",
            "example": false,
            "type": "boolean"
          },
          "size": {
            "description": "Disk size in bytes",
            "example": 107374182400,
            "minimum": 0,
            "type": "integer"
          },
          "source": {
            "description": "Disk source path",
            "example": "/mnt/user/domains/Windows-10-Gaming/vdisk1.img",
            "type": "string"
          },
          "type": {
            "description": "Disk type",
            "enum": [
              "file",
              "block",
              "network"
            ],
            "example": "file",
            "type": "string"
          }
        },
        "required": [
          "device",
          "source",
          "type",
          "bus"
        ],
        "type": "object"
      },
      "VMInfo": {
        "properties": {
          "cpu_time": {
            "description": "CPU time with units",
            "example": "14441.1s",
            "type": "string"
          },
          "created": {
            "description": "VM creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "VM description",
            "example": "Windows 10 gaming virtual machine",
            "type": "string"
          },
          "detailed_state": {
            "description": "Detailed VM state",
            "enum": [
              "running",
              "idle",
              "paused",
              "shutdown",
              "shut off",
              "crashed",
              "dying",
              "pmsuspended"
            ],
            "example": "running",
            "type": "string"
          },
          "disks": {
            "description": "VM disk attachments",
            "items": {
              "$ref": "#/components/schemas/VMDisk"
            },
            "type": "array"
          },
          "id": {
            "description": "VM identifier",
            "example": "vm-001",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "max_memory": {
            "description": "Maximum memory with units",
            "example": "4194304 KiB",
            "type": "string"
          },
          "name": {
            "description": "VM name",
            "example": "Windows-10-Gaming",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_.-]+$",
            "type": "string"
          },
          "networks": {
            "description": "VM network interfaces",
            "items": {
              "$ref": "#/components/schemas/VMNetwork"
            },
            "type": "array"
          },
          "os_type": {
            "description": "Operating system type",
            "enum": [
              "windows",
              "linux",
              "macos",
              "other"
            ],
            "example": "windows",
            "type": "string"
          },
          "resources": {
            "$ref": "#/components/schemas/VMResources"
          },
          "state": {
            "$ref": "#/components/schemas/VMState"
          },
          "stats": {
            "description": "VM runtime statistics",
            "properties": {
              "cpu_usage": {
                "description": "CPU usage percentage",
                "example": 25.5,
                "maximum": 100,
                "minimum": 0,
                "type": "number"
              },
              "disk_read": {
                "description": "Disk read bytes",
                "example": 1048576000,
                "minimum": 0,
                "type": "integer"
              },
              "disk_write": {
                "description": "Disk write bytes",
                "example": 524288000,
                "minimum": 0,
                "type": "integer"
              },
              "memory_usage": {
                "description": "Memory usage percentage",
                "example": 45.2,
                "maximum": 100,
                "minimum": 0,
                "type": "number"
              },
              "network_rx": {
                "description": "Network received bytes",
                "example": 2097152000,
                "minimum": 0,
                "type": "integer"
              },
              "network_tx": {
                "description": "Network transmitted bytes",
                "example": 1048576000,
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "template": {
            "description": "VM template used",
            "example": "Windows 10",
            "type": "string"
          },
          "type": {
            "description": "VM type",
            "enum": [
              "kvm",
              "qemu",
              "xen",
              "vmware"
            ],
            "example": "kvm",
            "type": "string"
          },
          "used_memory": {
            "description": "Currently used memory with units",
            "example": "2097152 KiB",
            "type": "string"
          },
          "vcpus": {
            "description": "Number of virtual CPUs",
            "example": "2",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "state",
          "os_type",
          "type",
          "max_memory",
          "used_memory",
          "vcpus",
          "cpu_time",
          "detailed_state",
          "stats",
          "resources",
          "created",
          "last_updated"
        ],
        "type": "object"
      },
      "VMList": {
        "description": "List of virtual machines",
        "example": [
          {
            "cpu": 2,
            "id": "vm-001",
            "memory": 4096,
            "name": "Ubuntu-Server",
            "state": "running",
            "template": "Ubuntu"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/VMInfo"
        },
        "type": "array"
      },
      "VMNetwork": {
        "properties": {
          "interface": {
            "description": "Network interface name",
            "example": "vnet0",
            "type": "string"
          },
          "link_state": {
            "description": "Link state",
            "enum": [
              "up",
              "down"
            ],
            "example": "up",
            "type": "string"
          },
          "mac_address": {
            "description": "MAC address",
            "example": "52:54:00:12:34:56",
            "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
            "type": "string"
          },
          "model": {
            "description": "Network model",
            "enum": [
              "virtio",
              "e1000",
              "rtl8139"
            ],
            "example": "virtio",
            "type": "string"
          },
          "source": {
            "description": "Network source",
            "example": "br0",
            "type": "string"
          },
          "type": {
            "description": "Network type",
            "enum": [
              "bridge",
              "network",
              "direct"
            ],
            "example": "bridge",
            "type": "string"
          }
        },
        "required": [
          "interface",
          "type",
          "source",
          "model"
        ],
        "type": "object"
      },
      "VMOperation": {
        "properties": {
          "force": {
            "default": false,
            "description": "Force the operation",
            "example": false,
            "type": "boolean"
          },
          "operation": {
            "description": "VM operation to perform",
            "enum": [
              "start",
              "stop",
              "restart",
              "pause",
              "resume",
              "suspend",
              "reset"
            ],
            "example": "start",
            "type": "string"
          }
        },
        "required": [
          "operation"
        ],
        "type": "object"
      },
      "VMOperationResponse": {
        "properties": {
          "message": {
            "description": "Operation result message",
            "example": "VM started successfully",
            "type": "string"
          },
          "operation": {
            "description": "Operation that was performed",
            "example": "start",
            "type": "string"
          },
          "state": {
            "description": "Current VM state after operation",
            "example": "running",
            "type": "string"
          },
          "success": {
            "description": "Whether the operation was successful",
            "example": true,
            "type": "boolean"
          },
          "vm_id": {
            "description": "VM identifier",
            "example": "vm-001",
            "type": "string"
          }
        },
        "required": [
          "success",
          "message",
          "vm_id",
          "operation"
        ],
        "type": "object"
      },
      "VMResources": {
        "properties": {
          "bios": {
            "description": "BIOS type",
            "enum": [
              "seabios",
              "ovmf"
            ],
            "example": "ovmf",
            "type": "string"
          },
          "cpu_mode": {
            "description": "CPU mode",
            "enum": [
              "host-passthrough",
              "host-model",
              "custom"
            ],
            "example": "host-passthrough",
            "type": "string"
          },
          "cpu_topology": {
            "properties": {
              "cores": {
                "example": 4,
                "minimum": 1,
                "type": "integer"
              },
              "sockets": {
                "example": 1,
                "minimum": 1,
                "type": "integer"
              },
              "threads": {
                "example": 1,
                "minimum": 1,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "machine_type": {
            "description": "Machine type",
            "example": "pc-q35-6.2",
            "type": "string"
          },
          "memory": {
            "description": "Allocated memory in bytes",
            "example": 8589934592,
            "minimum": 134217728,
            "type": "integer"
          },
          "memory_mb": {
            "description": "Allocated memory in MB",
            "example": 8192,
            "minimum": 128,
            "type": "integer"
          },
          "vcpus": {
            "description": "Number of virtual CPUs",
            "example": 4,
            "maximum": 64,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "vcpus",
          "memory",
          "memory_mb"
        ],
        "type": "object"
      },
      "VMSnapshot": {
        "properties": {
          "creation_time": {
            "description": "Snapshot creation timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "current": {
            "description": "Whether this is the current snapshot",
            "example": true,
            "type": "boolean"
          },
          "description": {
            "description": "Snapshot description",
            "example": "Snapshot before system update",
            "type": "string"
          },
          "name": {
            "description": "Snapshot name",
            "example": "pre-update-snapshot",
            "type": "string"
          },
          "parent": {
            "description": "Parent snapshot name",
            "example": "base-snapshot",
            "type": "string"
          },
          "state": {
            "description": "VM state when snapshot was taken",
            "enum": [
              "running",
              "shutoff",
              "paused"
            ],
            "example": "shutoff",
            "type": "string"
          }
        },
        "required": [
          "name",
          "state",
          "creation_time"
        ],
        "type": "object"
      },
      "VMSnapshotList": {
        "description": "List of VM snapshots",
        "example": [
          {
            "creation_time": "2025-06-16T14:30:00Z",
            "current": false,
            "description": "Snapshot before system update",
            "name": "pre-update-snapshot",
            "state": "shutoff"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/VMSnapshot"
        },
        "type": "array"
      },
      "VMSnapshotResponse": {
        "properties": {
          "message": {
            "description": "Operation result message",
            "example": "Snapshot created successfully",
            "type": "string"
          },
          "operation": {
            "description": "Snapshot operation performed",
            "enum": [
              "create",
              "delete",
              "revert"
            ],
            "example": "create",
            "type": "string"
          },
          "snapshot": {
            "$ref": "#/components/schemas/VMSnapshot"
          },
          "success": {
            "description": "Whether the snapshot operation was successful",
            "example": true,
            "type": "boolean"
          },
          "vm_id": {
            "description": "VM identifier",
            "example": "vm-001",
            "type": "string"
          }
        },
        "required": [
          "success",
          "message",
          "vm_id",
          "operation"
        ],
        "type": "object"
      },
      "VMState": {
        "properties": {
          "autostart": {
            "description": "Whether VM starts automatically",
            "example": true,
            "type": "boolean"
          },
          "cpu_usage": {
            "description": "CPU usage percentage",
            "example": 25.5,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "last_updated": {
            "description": "Last state update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "memory_usage": {
            "description": "Memory usage percentage",
            "example": 45.2,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "memory_used": {
            "description": "Used memory in bytes",
            "example": 4294967296,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "description": "VM status",
            "enum": [
              "running",
              "stopped",
              "paused",
              "suspended",
              "starting",
              "stopping",
              "error"
            ],
            "example": "running",
            "type": "string"
          },
          "uptime": {
            "description": "VM uptime in seconds",
            "example": 3600,
            "minimum": 0,
            "type": "integer"
          },
          "vnc_port": {
            "description": "VNC port number",
            "example": 5900,
            "maximum": 6000,
            "minimum": 5900,
            "type": "integer"
          }
        },
        "required": [
          "status",
          "last_updated"
        ],
        "type": "object"
      },
      "VMStats": {
        "properties": {
          "cpu_usage": {
            "description": "CPU usage percentage",
            "example": 25.5,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "disk_read": {
            "description": "Disk read bytes",
            "example": 1073741824,
            "minimum": 0,
            "type": "integer"
          },
          "disk_write": {
            "description": "Disk write bytes",
            "example": 536870912,
            "minimum": 0,
            "type": "integer"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "memory_total": {
            "description": "Total allocated memory in bytes",
            "example": 8589934592,
            "minimum": 0,
            "type": "integer"
          },
          "memory_usage": {
            "description": "Memory usage percentage",
            "example": 45.2,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "memory_used": {
            "description": "Used memory in bytes",
            "example": 4294967296,
            "minimum": 0,
            "type": "integer"
          },
          "network_rx": {
            "description": "Network received bytes",
            "example": 268435456,
            "minimum": 0,
            "type": "integer"
          },
          "network_tx": {
            "description": "Network transmitted bytes",
            "example": 134217728,
            "minimum": 0,
            "type": "integer"
          },
          "uptime": {
            "description": "VM uptime in seconds",
            "example": 3600,
            "minimum": 0,
            "type": "integer"
          },
          "vm_id": {
            "description": "VM identifier",
            "example": "vm-001",
            "type": "string"
          }
        },
        "required": [
          "vm_id",
          "cpu_usage",
          "memory_usage",
          "last_updated"
        ],
        "type": "object"
      },
      "ValidationError": {
        "properties": {
          "code": {
            "description": "Validation error code for programmatic handling",
            "example": "INVALID_FORMAT",
            "type": "string"
          },
          "field": {
            "description": "Name of the field that failed validation",
            "example": "container_id",
            "type": "string"
          },
          "message": {
            "description": "Human-readable validation error message",
            "example": "Invalid container ID format (expected: 12-64 hex characters)",
            "type": "string"
          },
          "value": {
            "description": "The invalid value that was provided",
            "example": "invalid-container-id"
          }
        },
        "required": [
          "field",
          "message"
        ],
        "type": "object"
      },
      "ValidationErrorResponse": {
        "allOf": [
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "description": "Standardized error code",
                    "enum": [
                      "INVALID_REQUEST",
                      "UNAUTHORIZED",
                      "FORBIDDEN",
                      "NOT_FOUND",
                      "CONFLICT",
                      "INTERNAL_ERROR",
                      "SERVICE_UNAVAILABLE",
                      "RATE_LIMIT_EXCEEDED",
                      "VALIDATION_FAILED",
                      "MISSING_PARAMETER",
                      "INVALID_PARAMETER",
                      "PARAMETER_OUT_OF_RANGE",
                      "ARRAY_NOT_STOPPED",
                      "ARRAY_NOT_STARTED",
                      "ARRAY_INVALID_STATE",
                      "DISK_NOT_FOUND",
                      "DISK_OFFLINE",
                      "DISK_READ_ONLY",
                      "PARITY_CHECK_ACTIVE",
                      "PARITY_CHECK_FAILED",
                      "INSUFFICIENT_SPACE",
                      "CONTAINER_NOT_FOUND",
                      "CONTAINER_NOT_RUNNING",
                      "CONTAINER_NOT_STOPPED",
                      "DOCKER_DAEMON_ERROR",
                      "IMAGE_NOT_FOUND",
                      "NETWORK_NOT_FOUND",
                      "VM_NOT_FOUND",
                      "VM_NOT_RUNNING",
                      "VM_NOT_STOPPED",
                      "VM_CONFIG_ERROR",
                      "VIRT_MANAGER_ERROR",
                      "SYSTEM_NOT_READY",
                      "COMMAND_FAILED",
                      "PERMISSION_DENIED",
                      "RESOURCE_BUSY",
                      "HARDWARE_ERROR",
                      "OPERATION_NOT_FOUND",
                      "OPERATION_NOT_CANCELLABLE",
                      "OPERATION_CONFLICT",
                      "OPERATION_TIMEOUT",
                      "MAX_OPERATIONS_REACHED",
                      "INVALID_CREDENTIALS",
                      "TOKEN_EXPIRED",
                      "TOKEN_INVALID",
                      "SESSION_EXPIRED",
                      "CONFIG_NOT_FOUND",
                      "CONFIG_INVALID",
                      "CONFIG_READ_ONLY"
                    ],
                    "example": "OPERATION_NOT_FOUND",
                    "type": "string"
                  },
                  "details": {
                    "additionalProperties": true,
                    "description": "Additional error context and debugging information",
                    "nullable": true,
                    "properties": {
                      "client_ip": {
                        "description": "Client IP address for rate limiting errors",
                        "type": "string"
                      },
                      "conflicting_operation": {
                        "description": "ID or type of conflicting operation",
                        "type": "string"
                      },
                      "limit": {
                        "description": "Rate limit that was exceeded",
                        "properties": {
                          "requests": {
                            "type": "integer"
                          },
                          "window": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "operation_type": {
                        "description": "Type of operation that failed",
                        "type": "string"
                      },
                      "resource_id": {
                        "description": "ID of the resource that caused the error",
                        "type": "string"
                      },
                      "resource_type": {
                        "description": "Type of resource (disk, container, vm, operation, etc.)",
                        "type": "string"
                      },
                      "validation_errors": {
                        "description": "Detailed validation errors for each field",
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "message": {
                    "description": "Human-readable error message",
                    "example": "Operation not found",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "message"
                ],
                "type": "object"
              },
              "meta": {
                "properties": {
                  "api_version": {
                    "description": "API version",
                    "example": "v1",
                    "type": "string"
                  },
                  "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Unix timestamp of the response",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "timestamp",
                  "api_version"
                ],
                "type": "object"
              }
            },
            "required": [
              "error",
              "meta"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "properties": {
                  "code": {
                    "enum": [
                      "VALIDATION_FAILED"
                    ],
                    "type": "string"
                  },
                  "details": {
                    "properties": {
                      "validation_errors": {
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "minItems": 1,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "WebSocketError": {
        "properties": {
          "code": {
            "description": "Error code",
            "enum": [
              "INVALID_MESSAGE",
              "INVALID_CHANNEL",
              "SUBSCRIPTION_FAILED",
              "RATE_LIMITED",
              "AUTHENTICATION_REQUIRED",
              "PERMISSION_DENIED"
            ],
            "example": "INVALID_CHANNEL",
            "type": "string"
          },
          "details": {
            "additionalProperties": true,
            "description": "Additional error details",
            "example": {
              "channel": "invalid.channel",
              "reason": "Channel does not exist"
            },
            "type": "object"
          },
          "error": {
            "description": "Error message",
            "example": "Invalid subscription channel",
            "type": "string"
          },
          "timestamp": {
            "description": "Error timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "error",
          "code",
          "timestamp"
        ],
        "type": "object"
      },
      "WebSocketEvent": {
        "properties": {
          "correlation_id": {
            "description": "Correlation ID for tracking related events",
            "example": "corr_1234567890",
            "type": "string"
          },
          "data": {
            "description": "Event-specific data",
            "example": {
              "container_id": "plex",
              "container_name": "plex",
              "status": "running"
            }
          },
          "event": {
            "description": "Event name",
            "enum": [
              "system.stats",
              "docker.container.start",
              "docker.container.stop",
              "storage.array.status",
              "vm.state.change",
              "ups.status.change",
              "temperature.alert",
              "disk.smart.warning"
            ],
            "example": "docker.container.start",
            "type": "string"
          },
          "severity": {
            "description": "Event severity",
            "enum": [
              "info",
              "warning",
              "error",
              "critical"
            ],
            "example": "info",
            "type": "string"
          },
          "source": {
            "description": "Event source",
            "enum": [
              "system",
              "docker",
              "storage",
              "vm",
              "ups",
              "monitoring"
            ],
            "example": "docker",
            "type": "string"
          },
          "timestamp": {
            "description": "Event timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "event",
          "source",
          "severity",
          "timestamp"
        ],
        "type": "object"
      },
      "WebSocketMessage": {
        "properties": {
          "channel": {
            "description": "WebSocket channel",
            "example": "system.stats",
            "type": "string"
          },
          "data": {
            "description": "Message data payload",
            "example": {
              "cpu_usage": 25.5,
              "memory_usage": 45.2,
              "timestamp": "2025-06-16T14:30:00Z"
            }
          },
          "event": {
            "description": "Event name",
            "example": "system.stats",
            "type": "string"
          },
          "id": {
            "description": "Message ID for tracking",
            "example": "msg_1234567890",
            "type": "string"
          },
          "timestamp": {
            "description": "Message timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Message type",
            "enum": [
              "event",
              "data",
              "error",
              "ping",
              "pong",
              "subscribe",
              "unsubscribe"
            ],
            "example": "event",
            "type": "string"
          }
        },
        "required": [
          "type",
          "timestamp"
        ],
        "type": "object"
      },
      "WebSocketSubscription": {
        "properties": {
          "action": {
            "description": "Subscription action",
            "enum": [
              "subscribe",
              "unsubscribe"
            ],
            "example": "subscribe",
            "type": "string"
          },
          "channels": {
            "description": "Channels to subscribe/unsubscribe",
            "example": [
              "system.stats",
              "docker.events"
            ],
            "items": {
              "enum": [
                "system.stats",
                "docker.events",
                "storage.status",
                "vm.events",
                "ups.status",
                "temperature.alerts",
                "disk.smart",
                "network.stats"
              ],
              "type": "string"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "filters": {
            "description": "Optional filters for events",
            "properties": {
              "container_ids": {
                "description": "Filter Docker events by container IDs",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "severity": {
                "description": "Filter by event severity",
                "items": {
                  "enum": [
                    "info",
                    "warning",
                    "error",
                    "critical"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "source": {
                "description": "Filter by event source",
                "items": {
                  "enum": [
                    "system",
                    "docker",
                    "storage",
                    "vm",
                    "ups"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "rate_limit": {
            "default": 0,
            "description": "Maximum events per second (0 = no limit)",
            "example": 10,
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "action",
          "channels"
        ],
        "type": "object"
      },
      "ZFSDatasetInfo": {
        "properties": {
          "available": {
            "description": "Available space in bytes",
            "example": 1500000000000,
            "minimum": 0,
            "type": "integer"
          },
          "compression": {
            "description": "Compression algorithm",
            "example": "lz4",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "mountpoint": {
            "description": "Dataset mountpoint",
            "example": "/mnt/tank/data",
            "type": "string"
          },
          "name": {
            "description": "Dataset name",
            "example": "tank/data",
            "type": "string"
          },
          "referenced": {
            "description": "Referenced space in bytes",
            "example": 500000000000,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "description": "Dataset type",
            "enum": [
              "filesystem",
              "volume",
              "snapshot"
            ],
            "example": "filesystem",
            "type": "string"
          },
          "used": {
            "description": "Used space in bytes",
            "example": 500000000000,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "type",
          "used",
          "available",
          "last_updated"
        ],
        "type": "object"
      },
      "ZFSInfo": {
        "properties": {
          "datasets": {
            "description": "ZFS datasets",
            "items": {
              "$ref": "#/components/schemas/ZFSDatasetInfo"
            },
            "type": "array"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2024-01-01T12:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "overall_health": {
            "description": "Overall ZFS health status",
            "enum": [
              "ONLINE",
              "DEGRADED",
              "FAULTED",
              "OFFLINE",
              "UNAVAIL"
            ],
            "example": "ONLINE",
            "type": "string"
          },
          "pools": {
            "description": "ZFS pools",
            "items": {
              "$ref": "#/components/schemas/ZFSPoolInfo"
            },
            "type": "array"
          },
          "total_capacity": {
            "description": "Total ZFS capacity in bytes",
            "example": 2000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_free": {
            "description": "Total ZFS free space in bytes",
            "example": 1000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "total_used": {
            "description": "Total ZFS used space in bytes",
            "example": 1000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "version": {
            "description": "ZFS version",
            "example": "2.1.5",
            "type": "string"
          }
        },
        "required": [
          "pools",
          "datasets",
          "total_capacity",
          "total_used",
          "total_free",
          "overall_health",
          "last_updated"
        ],
        "type": "object"
      },
      "ZFSPoolInfo": {
        "properties": {
          "allocated": {
            "description": "Allocated space in bytes",
            "example": 1000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "capacity": {
            "description": "Pool capacity percentage",
            "example": 50,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "dedup_ratio": {
            "description": "Deduplication ratio",
            "example": 1,
            "minimum": 1,
            "type": "number"
          },
          "fragmentation": {
            "description": "Pool fragmentation percentage",
            "example": 15.5,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "free": {
            "description": "Free space in bytes",
            "example": 1000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "health": {
            "description": "Pool health",
            "enum": [
              "ONLINE",
              "DEGRADED",
              "FAULTED",
              "OFFLINE",
              "UNAVAIL",
              "REMOVED"
            ],
            "example": "ONLINE",
            "type": "string"
          },
          "last_updated": {
            "description": "Last update timestamp",
            "example": "2025-06-16T14:30:00Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "ZFS pool name",
            "example": "tank",
            "type": "string"
          },
          "size": {
            "description": "Total pool size in bytes",
            "example": 2000000000000,
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "description": "Pool status",
            "enum": [
              "ONLINE",
              "DEGRADED",
              "FAULTED",
              "OFFLINE",
              "UNAVAIL",
              "REMOVED"
            ],
            "example": "ONLINE",
            "type": "string"
          }
        },
        "required": [
          "name",
          "status",
          "health",
          "size",
          "last_updated"
        ],
        "type": "object"
      }
    },
    "responses": {
      "Accepted": {
        "content": {
          "application/json": {
            "examples": {
              "async_operation": {
                "summary": "Asynchronous Operation",
                "value": {
                  "data": {
                    "estimated_completion": "2025-06-16T14:35:00Z",
                    "operation_id": "op_1234567890",
                    "status": "pending"
                  },
                  "message": "Request accepted for processing",
                  "success": true
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            }
          }
        },
        "description": "Accepted - Request accepted for processing"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "malformed_json": {
                "summary": "Malformed JSON",
                "value": {
                  "code": "MALFORMED_JSON",
                  "details": {
                    "column": 12,
                    "line": 5
                  },
                  "error": "Invalid JSON in request body",
                  "request_id": "req_1234567890_5678"
                }
              },
              "missing_parameter": {
                "summary": "Missing Required Parameter",
                "value": {
                  "code": "MISSING_PARAMETER",
                  "details": {
                    "location": "request body",
                    "parameter": "operation"
                  },
                  "error": "Missing required parameter",
                  "request_id": "req_1234567890_5678"
                }
              },
              "validation_error": {
                "summary": "Validation Error",
                "value": {
                  "code": "VALIDATION_ERROR",
                  "details": {
                    "field": "container_ids",
                    "message": "must contain at least 1 item"
                  },
                  "error": "Invalid request parameters",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad Request - Invalid request parameters or malformed request"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "examples": {
              "array_already_started": {
                "summary": "Array Already Started",
                "value": {
                  "code": "ARRAY_ALREADY_STARTED",
                  "details": {
                    "current_status": "started",
                    "requested_action": "start"
                  },
                  "error": "Unraid array is already started",
                  "request_id": "req_1234567890_5678"
                }
              },
              "container_already_running": {
                "summary": "Container Already Running",
                "value": {
                  "code": "CONTAINER_ALREADY_RUNNING",
                  "details": {
                    "container_id": "plex",
                    "current_status": "running",
                    "requested_action": "start"
                  },
                  "error": "Container 'plex' is already running",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Conflict - The request conflicts with the current state of the resource"
      },
      "Created": {
        "content": {
          "application/json": {
            "examples": {
              "resource_created": {
                "summary": "Resource Created",
                "value": {
                  "data": {
                    "created_at": "2025-06-16T14:30:00Z",
                    "id": "resource_1234567890"
                  },
                  "message": "Resource created successfully",
                  "success": true
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            }
          }
        },
        "description": "Created - Resource created successfully"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "examples": {
              "insufficient_permissions": {
                "summary": "Insufficient Permissions",
                "value": {
                  "details": {
                    "required_permission": "docker.containers.manage",
                    "user_permissions": [
                      "docker.containers.read"
                    ]
                  },
                  "error": "Insufficient permissions",
                  "error_code": "INSUFFICIENT_PERMISSIONS",
                  "timestamp": "2025-06-16T14:30:00Z"
                }
              },
              "readonly_user": {
                "summary": "Read-only User",
                "value": {
                  "details": {
                    "operation": "container_start",
                    "user_role": "readonly"
                  },
                  "error": "Read-only user cannot perform write operations",
                  "error_code": "READONLY_USER",
                  "timestamp": "2025-06-16T14:30:00Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/AuthError"
            }
          }
        },
        "description": "Forbidden - Insufficient permissions for the requested operation"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "examples": {
              "service_unavailable": {
                "summary": "Service Unavailable",
                "value": {
                  "code": "SERVICE_UNAVAILABLE",
                  "details": {
                    "service": "docker",
                    "status": "unreachable"
                  },
                  "error": "Docker daemon is not available",
                  "request_id": "req_1234567890_5678"
                }
              },
              "unexpected_error": {
                "summary": "Unexpected Error",
                "value": {
                  "code": "INTERNAL_ERROR",
                  "details": {
                    "error_id": "err_1234567890"
                  },
                  "error": "An unexpected error occurred",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error - An unexpected error occurred"
      },
      "NoContent": {
        "description": "No Content - Operation completed successfully with no response body"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "container_not_found": {
                "summary": "Container Not Found",
                "value": {
                  "code": "CONTAINER_NOT_FOUND",
                  "details": {
                    "container_id": "nonexistent",
                    "suggestion": "Check container name or ID"
                  },
                  "error": "Container 'nonexistent' not found",
                  "request_id": "req_1234567890_5678"
                }
              },
              "endpoint_not_found": {
                "summary": "Endpoint Not Found",
                "value": {
                  "code": "ENDPOINT_NOT_FOUND",
                  "details": {
                    "path": "/api/v1/nonexistent",
                    "suggestion": "Check API documentation for valid endpoints"
                  },
                  "error": "The requested endpoint does not exist",
                  "request_id": "req_1234567890_5678"
                }
              },
              "vm_not_found": {
                "summary": "VM Not Found",
                "value": {
                  "code": "VM_NOT_FOUND",
                  "details": {
                    "suggestion": "Check VM name or ID",
                    "vm_id": "missing-vm"
                  },
                  "error": "Virtual machine 'missing-vm' not found",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Not Found - The requested resource does not exist"
      },
      "ServiceUnavailable": {
        "content": {
          "application/json": {
            "examples": {
              "maintenance_mode": {
                "summary": "Maintenance Mode",
                "value": {
                  "code": "MAINTENANCE_MODE",
                  "details": {
                    "estimated_duration": "30 minutes",
                    "retry_after": 1800
                  },
                  "error": "Service is in maintenance mode",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Service Unavailable - The service is temporarily unavailable",
        "headers": {
          "Retry-After": {
            "description": "Seconds to wait before retrying",
            "schema": {
              "type": "integer"
            }
          }
        }
      },
      "Success": {
        "content": {
          "application/json": {
            "examples": {
              "operation_success": {
                "summary": "Operation Success",
                "value": {
                  "data": {
                    "operation_id": "op_1234567890",
                    "timestamp": "2025-06-16T14:30:00Z"
                  },
                  "message": "Operation completed successfully",
                  "success": true
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            }
          }
        },
        "description": "Success - Operation completed successfully"
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "examples": {
              "rate_limited": {
                "summary": "Rate Limit Exceeded",
                "value": {
                  "code": "RATE_LIMITED",
                  "details": {
                    "limit": 100,
                    "reset_at": "2025-06-16T15:30:00Z",
                    "retry_after": 3600,
                    "window": "1 hour"
                  },
                  "error": "Rate limit exceeded",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Too Many Requests - Rate limit exceeded",
        "headers": {
          "X-RateLimit-Limit": {
            "description": "Request limit per time window",
            "schema": {
              "type": "integer"
            }
          },
          "X-RateLimit-Remaining": {
            "description": "Remaining requests in current window",
            "schema": {
              "type": "integer"
            }
          },
          "X-RateLimit-Reset": {
            "description": "Time when rate limit resets (Unix timestamp)",
            "schema": {
              "type": "integer"
            }
          }
        }
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "examples": {
              "expired_token": {
                "summary": "Expired Token",
                "value": {
                  "details": {
                    "expired_at": "2025-06-16T13:30:00Z"
                  },
                  "error": "Authentication token has expired",
                  "error_code": "TOKEN_EXPIRED",
                  "timestamp": "2025-06-16T14:30:00Z"
                }
              },
              "invalid_token": {
                "summary": "Invalid Token",
                "value": {
                  "details": {
                    "message": "Token signature verification failed"
                  },
                  "error": "Invalid authentication token",
                  "error_code": "TOKEN_INVALID",
                  "timestamp": "2025-06-16T14:30:00Z"
                }
              },
              "missing_token": {
                "summary": "Missing Authentication Token",
                "value": {
                  "details": {
                    "message": "Authorization header is required"
                  },
                  "error": "Authentication required",
                  "error_code": "TOKEN_MISSING",
                  "timestamp": "2025-06-16T14:30:00Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/AuthError"
            }
          }
        },
        "description": "Unauthorized - Authentication required or invalid credentials"
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "examples": {
              "invalid_operation": {
                "summary": "Invalid Operation",
                "value": {
                  "code": "INVALID_OPERATION",
                  "details": {
                    "container_id": "plex",
                    "current_status": "exited",
                    "requested_action": "pause",
                    "valid_actions": [
                      "start",
                      "remove"
                    ]
                  },
                  "error": "Cannot perform operation on container in current state",
                  "request_id": "req_1234567890_5678"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unprocessable Entity - The request is well-formed but contains semantic errors"
      }
    },
    "securitySchemes": {}
  }
}