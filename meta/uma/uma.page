Menu="Utilities"
Icon="uma.png"
Title="UMA"
Markdown="false"
---
<style>
.uma-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}
.uma-status {
    background: #f5f5f5;
    border-left: 4px solid #4CAF50;
    padding: 15px;
    margin: 20px 0;
    border-radius: 4px;
}
.uma-status.stopped {
    border-left-color: #ff9800;
}
.uma-form-group {
    margin: 15px 0;
    display: flex;
    align-items: center;
}
.uma-form-group label {
    min-width: 150px;
    font-weight: bold;
}
.uma-form-group input, .uma-form-group select {
    margin-left: 10px;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 3px;
}
.uma-button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin: 5px;
    text-decoration: none;
    display: inline-block;
}
.uma-button:hover {
    background-color: #45a049;
}
.uma-button.secondary {
    background-color: #2196F3;
}
.uma-button.secondary:hover {
    background-color: #1976D2;
}
.uma-web-ui-link {
    background-color: #2196F3;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    margin: 10px 0;
    transition: background-color 0.3s;
}
.uma-web-ui-link:hover {
    background-color: #1976D2;
    color: white;
    text-decoration: none;
}
.mcp-section {
    border-top: 1px solid #ddd;
    padding-top: 20px;
    margin-top: 30px;
}
.mcp-info {
    color: #666;
    font-size: 14px;
    margin-bottom: 15px;
    line-height: 1.4;
}
.mcp-info a {
    color: #2196F3;
    text-decoration: none;
}
.mcp-info a:hover {
    text-decoration: underline;
}
</style>
<?php
$sName = "uma";
$uma_cfg = parse_plugin_cfg("uma");
$uma_service = isset($uma_cfg['SERVICE']) ? $uma_cfg['SERVICE'] : "enable";
$uma_port = isset($uma_cfg['PORT']) ? $uma_cfg['PORT'] : "34600";

// MCP Configuration
$mcp_enabled = isset($uma_cfg['MCP_ENABLED']) ? $uma_cfg['MCP_ENABLED'] : "disable";
$mcp_port = isset($uma_cfg['MCP_PORT']) ? $uma_cfg['MCP_PORT'] : "34800";
$mcp_max_connections = isset($uma_cfg['MCP_MAX_CONNECTIONS']) ? $uma_cfg['MCP_MAX_CONNECTIONS'] : "100";

$uma_running = trim(shell_exec("pidof uma | wc -w"));
$uma_version = trim(shell_exec("cat /usr/local/emhttp/plugins/uma/VERSION 2>/dev/null || echo '2025.06.22'"));
$server_ip = $_SERVER['SERVER_ADDR'];

// Check if UMA is actually running and responding
$uma_api_responsive = false;
$mcp_status = "";
if ($uma_running >= 1) {
    // Test if API is responsive
    $context = stream_context_create(['http' => ['timeout' => 2]]);
    $health_response = @file_get_contents("http://localhost:$uma_port/api/v1/health", false, $context);
    $uma_api_responsive = ($health_response !== false);

    // Check MCP status if UMA is running and responsive
    if ($uma_api_responsive && $mcp_enabled == "enable") {
        $mcp_status_json = @file_get_contents("http://localhost:$uma_port/api/v1/mcp/config", false, $context);
        if ($mcp_status_json) {
            $mcp_status_data = json_decode($mcp_status_json, true);
            $mcp_status = isset($mcp_status_data['data']['enabled']) && $mcp_status_data['data']['enabled'] ? "running" : "disabled";
        }
    }
}
?>

<div class="uma-container">
	<div class="uma-status <?php echo ($uma_running >= 1 && $uma_api_responsive) ? '' : 'stopped'; ?>">
		<h3>UMA (Unraid Management Agent)</h3>
		<?php if ($uma_running >= 1 && $uma_api_responsive): ?>
			<p style="color: green; font-weight: bold;">âœ“ Service is running</p>
			<p>HTTP API available on port <?=$uma_port;?></p>
		<?php elseif ($uma_running >= 1 && !$uma_api_responsive): ?>
			<p style="color: orange; font-weight: bold;">âš  Service is starting or not responding</p>
			<p>Please wait a moment and refresh the page</p>
			<?php if ($mcp_enabled == "enable"): ?>
				<?php if ($mcp_status == "running"): ?>
					<p style="color: green;">âœ“ MCP Server is running on port <?=$mcp_port;?></p>
				<?php elseif ($mcp_status == "disabled"): ?>
					<p style="color: orange;">âš  MCP Server is disabled in configuration</p>
				<?php else: ?>
					<p style="color: #666;">MCP Server status: checking...</p>
				<?php endif; ?>
			<?php else: ?>
				<p style="color: #666;">MCP Server is disabled</p>
			<?php endif; ?>
			<p>Features: REST API, WebSocket Streaming, MCP Protocol, Optimized Logging</p>
			<a href="http://<?=$server_ip;?>:<?=$uma_port;?>/api/v1/docs" target="_blank" class="uma-web-ui-link">
				ðŸš€ Open Web UI (Swagger API Documentation)
			</a>
		<?php else: ?>
			<p style="color: orange; font-weight: bold;">âš  Service is not running</p>
			<p>Configure and start the service below to access the Web UI</p>
		<?php endif; ?>
	</div>

	<form name="uma_settings" method="POST" action="/update.php" target="progressFrame" style="margin-top: 20px;">
		<input type="hidden" name="#file" value="uma/uma.cfg" />
		<input type="hidden" id="command" name="#command" value="" />

		<h4>Configuration Settings</h4>

		<div class="uma-form-group">
			<label for="SERVICE">Enable UMA:</label>
			<select id="SERVICE" name="SERVICE" size="1" onChange="checkRUNNING(this.form);">
				<?=mk_option($uma_service, "disable", "No");?>
				<?=mk_option($uma_service, "enable", "Yes");?>
			</select>
		</div>

		<div class="uma-form-group">
			<label for="PORT">HTTP Port:</label>
			<input id="PORT" name="PORT" type="number" value="<?=$uma_port;?>" min="1024" max="65535" placeholder="34600" style="width:100px;" onChange="checkRUNNING(this.form);">
			<small style="margin-left: 10px; color: #666;">Port range: 1024-65535 (default: 34600)</small>
		</div>

		<h4 class="mcp-section">MCP (Model Context Protocol) Settings</h4>
		<p class="mcp-info">
			MCP enables AI agents to interact with UMA through a standardized protocol.
			<a href="https://modelcontextprotocol.io/" target="_blank">Learn more about MCP</a>
		</p>

		<div class="uma-form-group">
			<label for="MCP_ENABLED">Enable MCP Server:</label>
			<select id="MCP_ENABLED" name="MCP_ENABLED" size="1" onChange="checkMCPSettings(this.form);">
				<?=mk_option($mcp_enabled, "disable", "No");?>
				<?=mk_option($mcp_enabled, "enable", "Yes");?>
			</select>
		</div>

		<div class="uma-form-group" id="mcp-port-group">
			<label for="MCP_PORT">MCP Port:</label>
			<input id="MCP_PORT" name="MCP_PORT" type="number" value="<?=$mcp_port;?>" min="1024" max="65535" placeholder="34800" style="width:100px;" onChange="checkRUNNING(this.form);">
			<small style="margin-left: 10px; color: #666;">Port range: 1024-65535 (default: 34800)</small>
		</div>

		<div class="uma-form-group" id="mcp-connections-group">
			<label for="MCP_MAX_CONNECTIONS">Max Connections:</label>
			<input id="MCP_MAX_CONNECTIONS" name="MCP_MAX_CONNECTIONS" type="number" value="<?=$mcp_max_connections;?>" min="1" max="1000" placeholder="100" style="width:100px;" onChange="checkRUNNING(this.form);">
			<small style="margin-left: 10px; color: #666;">Maximum concurrent MCP connections (default: 100)</small>
		</div>



		<?php if ($uma_running >= 1 && $uma_api_responsive): ?>
		<div class="uma-form-group">
			<label>Quick Access:</label>
			<a href="http://<?=$server_ip;?>:<?=$uma_port;?>/api/v1/docs" target="_blank" class="uma-web-ui-link">
				Open Web UI
			</a>
		</div>
		<?php endif; ?>

		<div style="margin-top: 30px;">
			<input id="DEFAULT" class="stopped uma-button secondary" type="submit" value="Default" onClick="resetDATA(this.form)">
			<input id="btnApply" class="uma-button" type="submit" value="Apply" onClick="return verifyDATA(this.form)">
			<input type="button" class="uma-button secondary" value="Done" onClick="done()">
		</div>
	</form>
</div>

<script type="text/javascript">
$(function(){
	showStatus('<?=$sName;?>');
	checkRUNNING(document.uma_settings);
	checkMCPSettings(document.uma_settings);
});

function isNumber(value) {
   return typeof value === 'number' && isFinite(value);
}

function resetDATA(form) {
	form.SERVICE.value = "enable";
	form.PORT.value = "34600";
	form.MCP_ENABLED.value = "disable";
	form.MCP_PORT.value = "34800";
	form.MCP_MAX_CONNECTIONS.value = "100";
	checkMCPSettings(form);
}

function checkRUNNING(form) {
	var isRunning = <?=$uma_running;?> >= 1 && <?=$uma_api_responsive ? 'true' : 'false';?>;
	if (isRunning)
	{
		$(".stopped").prop("disabled", true);
		form.btnApply.disabled = "disabled";
   }
   else
	$(".stopped").prop("disabled", (form.SERVICE.value == "enable"));
	if (form.SERVICE.value == "enable")
		form.command.value = "/usr/local/emhttp/plugins/uma/scripts/start";
	else {
		form.command.value = "/usr/local/emhttp/plugins/uma/scripts/stop";
		form.btnApply.disabled = (form.SERVICE.value == "enable");
	}
}

function checkMCPSettings(form) {
	var mcpEnabled = form.MCP_ENABLED.value == "enable";

	// Show/hide MCP configuration fields based on enabled status
	$("#mcp-port-group").toggle(mcpEnabled);
	$("#mcp-connections-group").toggle(mcpEnabled);

	// Enable/disable MCP fields
	form.MCP_PORT.disabled = !mcpEnabled;
	form.MCP_MAX_CONNECTIONS.disabled = !mcpEnabled;
}

function verifyDATA(form) {
	// Validate HTTP port number
	var port = parseInt(form.PORT.value);
	if (isNaN(port) || port < 1024 || port > 65535) {
		alert("HTTP Port must be a number between 1024 and 65535");
		return false;
	}

	// Validate MCP port if MCP is enabled
	if (form.MCP_ENABLED.value == "enable") {
		var mcpPort = parseInt(form.MCP_PORT.value);
		if (isNaN(mcpPort) || mcpPort < 1024 || mcpPort > 65535) {
			alert("MCP Port must be a number between 1024 and 65535");
			return false;
		}

		// Check if MCP port conflicts with HTTP port
		if (mcpPort == port) {
			alert("MCP Port cannot be the same as HTTP Port");
			return false;
		}

		// Validate max connections
		var maxConnections = parseInt(form.MCP_MAX_CONNECTIONS.value);
		if (isNaN(maxConnections) || maxConnections < 1 || maxConnections > 1000) {
			alert("Max Connections must be a number between 1 and 1000");
			return false;
		}
	}

	// Check for common reserved ports
	var reservedPorts = [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3389, 5432, 3306];
	if (reservedPorts.includes(port)) {
		if (!confirm("Port " + port + " is commonly used by other services. Are you sure you want to use this port?")) {
			return false;
		}
	}

	if (form.MCP_ENABLED.value == "enable" && reservedPorts.includes(parseInt(form.MCP_PORT.value))) {
		if (!confirm("MCP Port " + form.MCP_PORT.value + " is commonly used by other services. Are you sure you want to use this port?")) {
			return false;
		}
	}

	form.SERVICE.value = form.SERVICE.value.replace(/ /g,"_");
	form.PORT.value = port.toString();
	form.MCP_ENABLED.value = form.MCP_ENABLED.value.replace(/ /g,"_");
	if (form.MCP_ENABLED.value == "enable") {
		form.MCP_PORT.value = parseInt(form.MCP_PORT.value).toString();
		form.MCP_MAX_CONNECTIONS.value = parseInt(form.MCP_MAX_CONNECTIONS.value).toString();
	}
}
</script>
